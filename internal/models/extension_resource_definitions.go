// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ExtensionResourceDefinition is an object representing the database table.
type ExtensionResourceDefinition struct {
	ID           string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description  string     `boil:"description" json:"description" toml:"description" yaml:"description"`
	Enabled      bool       `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	SlugSingular string     `boil:"slug_singular" json:"slug_singular" toml:"slug_singular" yaml:"slug_singular"`
	SlugPlural   string     `boil:"slug_plural" json:"slug_plural" toml:"slug_plural" yaml:"slug_plural"`
	Version      string     `boil:"version" json:"version" toml:"version" yaml:"version"`
	Scope        string     `boil:"scope" json:"scope" toml:"scope" yaml:"scope"`
	Schema       types.JSON `boil:"schema" json:"schema" toml:"schema" yaml:"schema"`
	CreatedAt    time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ExtensionID  string     `boil:"extension_id" json:"extension_id" toml:"extension_id" yaml:"extension_id"`

	R *extensionResourceDefinitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L extensionResourceDefinitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExtensionResourceDefinitionColumns = struct {
	ID           string
	Name         string
	Description  string
	Enabled      string
	SlugSingular string
	SlugPlural   string
	Version      string
	Scope        string
	Schema       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	ExtensionID  string
}{
	ID:           "id",
	Name:         "name",
	Description:  "description",
	Enabled:      "enabled",
	SlugSingular: "slug_singular",
	SlugPlural:   "slug_plural",
	Version:      "version",
	Scope:        "scope",
	Schema:       "schema",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	ExtensionID:  "extension_id",
}

var ExtensionResourceDefinitionTableColumns = struct {
	ID           string
	Name         string
	Description  string
	Enabled      string
	SlugSingular string
	SlugPlural   string
	Version      string
	Scope        string
	Schema       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	ExtensionID  string
}{
	ID:           "extension_resource_definitions.id",
	Name:         "extension_resource_definitions.name",
	Description:  "extension_resource_definitions.description",
	Enabled:      "extension_resource_definitions.enabled",
	SlugSingular: "extension_resource_definitions.slug_singular",
	SlugPlural:   "extension_resource_definitions.slug_plural",
	Version:      "extension_resource_definitions.version",
	Scope:        "extension_resource_definitions.scope",
	Schema:       "extension_resource_definitions.schema",
	CreatedAt:    "extension_resource_definitions.created_at",
	UpdatedAt:    "extension_resource_definitions.updated_at",
	DeletedAt:    "extension_resource_definitions.deleted_at",
	ExtensionID:  "extension_resource_definitions.extension_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ExtensionResourceDefinitionWhere = struct {
	ID           whereHelperstring
	Name         whereHelperstring
	Description  whereHelperstring
	Enabled      whereHelperbool
	SlugSingular whereHelperstring
	SlugPlural   whereHelperstring
	Version      whereHelperstring
	Scope        whereHelperstring
	Schema       whereHelpertypes_JSON
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	ExtensionID  whereHelperstring
}{
	ID:           whereHelperstring{field: "\"extension_resource_definitions\".\"id\""},
	Name:         whereHelperstring{field: "\"extension_resource_definitions\".\"name\""},
	Description:  whereHelperstring{field: "\"extension_resource_definitions\".\"description\""},
	Enabled:      whereHelperbool{field: "\"extension_resource_definitions\".\"enabled\""},
	SlugSingular: whereHelperstring{field: "\"extension_resource_definitions\".\"slug_singular\""},
	SlugPlural:   whereHelperstring{field: "\"extension_resource_definitions\".\"slug_plural\""},
	Version:      whereHelperstring{field: "\"extension_resource_definitions\".\"version\""},
	Scope:        whereHelperstring{field: "\"extension_resource_definitions\".\"scope\""},
	Schema:       whereHelpertypes_JSON{field: "\"extension_resource_definitions\".\"schema\""},
	CreatedAt:    whereHelpertime_Time{field: "\"extension_resource_definitions\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"extension_resource_definitions\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"extension_resource_definitions\".\"deleted_at\""},
	ExtensionID:  whereHelperstring{field: "\"extension_resource_definitions\".\"extension_id\""},
}

// ExtensionResourceDefinitionRels is where relationship names are stored.
var ExtensionResourceDefinitionRels = struct {
	Extension string
}{
	Extension: "Extension",
}

// extensionResourceDefinitionR is where relationships are stored.
type extensionResourceDefinitionR struct {
	Extension *Extension `boil:"Extension" json:"Extension" toml:"Extension" yaml:"Extension"`
}

// NewStruct creates a new relationship struct
func (*extensionResourceDefinitionR) NewStruct() *extensionResourceDefinitionR {
	return &extensionResourceDefinitionR{}
}

func (r *extensionResourceDefinitionR) GetExtension() *Extension {
	if r == nil {
		return nil
	}
	return r.Extension
}

// extensionResourceDefinitionL is where Load methods for each relationship are stored.
type extensionResourceDefinitionL struct{}

var (
	extensionResourceDefinitionAllColumns            = []string{"id", "name", "description", "enabled", "slug_singular", "slug_plural", "version", "scope", "schema", "created_at", "updated_at", "deleted_at", "extension_id"}
	extensionResourceDefinitionColumnsWithoutDefault = []string{"name", "description", "slug_singular", "slug_plural", "version", "scope", "schema", "extension_id"}
	extensionResourceDefinitionColumnsWithDefault    = []string{"id", "enabled", "created_at", "updated_at", "deleted_at"}
	extensionResourceDefinitionPrimaryKeyColumns     = []string{"id"}
	extensionResourceDefinitionGeneratedColumns      = []string{}
)

type (
	// ExtensionResourceDefinitionSlice is an alias for a slice of pointers to ExtensionResourceDefinition.
	// This should almost always be used instead of []ExtensionResourceDefinition.
	ExtensionResourceDefinitionSlice []*ExtensionResourceDefinition
	// ExtensionResourceDefinitionHook is the signature for custom ExtensionResourceDefinition hook methods
	ExtensionResourceDefinitionHook func(context.Context, boil.ContextExecutor, *ExtensionResourceDefinition) error

	extensionResourceDefinitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	extensionResourceDefinitionType                 = reflect.TypeOf(&ExtensionResourceDefinition{})
	extensionResourceDefinitionMapping              = queries.MakeStructMapping(extensionResourceDefinitionType)
	extensionResourceDefinitionPrimaryKeyMapping, _ = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, extensionResourceDefinitionPrimaryKeyColumns)
	extensionResourceDefinitionInsertCacheMut       sync.RWMutex
	extensionResourceDefinitionInsertCache          = make(map[string]insertCache)
	extensionResourceDefinitionUpdateCacheMut       sync.RWMutex
	extensionResourceDefinitionUpdateCache          = make(map[string]updateCache)
	extensionResourceDefinitionUpsertCacheMut       sync.RWMutex
	extensionResourceDefinitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var extensionResourceDefinitionAfterSelectHooks []ExtensionResourceDefinitionHook

var extensionResourceDefinitionBeforeInsertHooks []ExtensionResourceDefinitionHook
var extensionResourceDefinitionAfterInsertHooks []ExtensionResourceDefinitionHook

var extensionResourceDefinitionBeforeUpdateHooks []ExtensionResourceDefinitionHook
var extensionResourceDefinitionAfterUpdateHooks []ExtensionResourceDefinitionHook

var extensionResourceDefinitionBeforeDeleteHooks []ExtensionResourceDefinitionHook
var extensionResourceDefinitionAfterDeleteHooks []ExtensionResourceDefinitionHook

var extensionResourceDefinitionBeforeUpsertHooks []ExtensionResourceDefinitionHook
var extensionResourceDefinitionAfterUpsertHooks []ExtensionResourceDefinitionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExtensionResourceDefinition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExtensionResourceDefinition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExtensionResourceDefinition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExtensionResourceDefinition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExtensionResourceDefinition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExtensionResourceDefinition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExtensionResourceDefinition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExtensionResourceDefinition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExtensionResourceDefinition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range extensionResourceDefinitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExtensionResourceDefinitionHook registers your hook function for all future operations.
func AddExtensionResourceDefinitionHook(hookPoint boil.HookPoint, extensionResourceDefinitionHook ExtensionResourceDefinitionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		extensionResourceDefinitionAfterSelectHooks = append(extensionResourceDefinitionAfterSelectHooks, extensionResourceDefinitionHook)
	case boil.BeforeInsertHook:
		extensionResourceDefinitionBeforeInsertHooks = append(extensionResourceDefinitionBeforeInsertHooks, extensionResourceDefinitionHook)
	case boil.AfterInsertHook:
		extensionResourceDefinitionAfterInsertHooks = append(extensionResourceDefinitionAfterInsertHooks, extensionResourceDefinitionHook)
	case boil.BeforeUpdateHook:
		extensionResourceDefinitionBeforeUpdateHooks = append(extensionResourceDefinitionBeforeUpdateHooks, extensionResourceDefinitionHook)
	case boil.AfterUpdateHook:
		extensionResourceDefinitionAfterUpdateHooks = append(extensionResourceDefinitionAfterUpdateHooks, extensionResourceDefinitionHook)
	case boil.BeforeDeleteHook:
		extensionResourceDefinitionBeforeDeleteHooks = append(extensionResourceDefinitionBeforeDeleteHooks, extensionResourceDefinitionHook)
	case boil.AfterDeleteHook:
		extensionResourceDefinitionAfterDeleteHooks = append(extensionResourceDefinitionAfterDeleteHooks, extensionResourceDefinitionHook)
	case boil.BeforeUpsertHook:
		extensionResourceDefinitionBeforeUpsertHooks = append(extensionResourceDefinitionBeforeUpsertHooks, extensionResourceDefinitionHook)
	case boil.AfterUpsertHook:
		extensionResourceDefinitionAfterUpsertHooks = append(extensionResourceDefinitionAfterUpsertHooks, extensionResourceDefinitionHook)
	}
}

// One returns a single extensionResourceDefinition record from the query.
func (q extensionResourceDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExtensionResourceDefinition, error) {
	o := &ExtensionResourceDefinition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for extension_resource_definitions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExtensionResourceDefinition records from the query.
func (q extensionResourceDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExtensionResourceDefinitionSlice, error) {
	var o []*ExtensionResourceDefinition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExtensionResourceDefinition slice")
	}

	if len(extensionResourceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExtensionResourceDefinition records in the query.
func (q extensionResourceDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count extension_resource_definitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q extensionResourceDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if extension_resource_definitions exists")
	}

	return count > 0, nil
}

// Extension pointed to by the foreign key.
func (o *ExtensionResourceDefinition) Extension(mods ...qm.QueryMod) extensionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExtensionID),
	}

	queryMods = append(queryMods, mods...)

	return Extensions(queryMods...)
}

// LoadExtension allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (extensionResourceDefinitionL) LoadExtension(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExtensionResourceDefinition interface{}, mods queries.Applicator) error {
	var slice []*ExtensionResourceDefinition
	var object *ExtensionResourceDefinition

	if singular {
		var ok bool
		object, ok = maybeExtensionResourceDefinition.(*ExtensionResourceDefinition)
		if !ok {
			object = new(ExtensionResourceDefinition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExtensionResourceDefinition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExtensionResourceDefinition))
			}
		}
	} else {
		s, ok := maybeExtensionResourceDefinition.(*[]*ExtensionResourceDefinition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExtensionResourceDefinition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExtensionResourceDefinition))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &extensionResourceDefinitionR{}
		}
		args = append(args, object.ExtensionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &extensionResourceDefinitionR{}
			}

			for _, a := range args {
				if a == obj.ExtensionID {
					continue Outer
				}
			}

			args = append(args, obj.ExtensionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`extensions`),
		qm.WhereIn(`extensions.id in ?`, args...),
		qmhelper.WhereIsNull(`extensions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Extension")
	}

	var resultSlice []*Extension
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Extension")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for extensions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for extensions")
	}

	if len(extensionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Extension = foreign
		if foreign.R == nil {
			foreign.R = &extensionR{}
		}
		foreign.R.ExtensionResourceDefinitions = append(foreign.R.ExtensionResourceDefinitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExtensionID == foreign.ID {
				local.R.Extension = foreign
				if foreign.R == nil {
					foreign.R = &extensionR{}
				}
				foreign.R.ExtensionResourceDefinitions = append(foreign.R.ExtensionResourceDefinitions, local)
				break
			}
		}
	}

	return nil
}

// SetExtension of the extensionResourceDefinition to the related item.
// Sets o.R.Extension to related.
// Adds o to related.R.ExtensionResourceDefinitions.
func (o *ExtensionResourceDefinition) SetExtension(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Extension) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"extension_resource_definitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"extension_id"}),
		strmangle.WhereClause("\"", "\"", 2, extensionResourceDefinitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExtensionID = related.ID
	if o.R == nil {
		o.R = &extensionResourceDefinitionR{
			Extension: related,
		}
	} else {
		o.R.Extension = related
	}

	if related.R == nil {
		related.R = &extensionR{
			ExtensionResourceDefinitions: ExtensionResourceDefinitionSlice{o},
		}
	} else {
		related.R.ExtensionResourceDefinitions = append(related.R.ExtensionResourceDefinitions, o)
	}

	return nil
}

// ExtensionResourceDefinitions retrieves all the records using an executor.
func ExtensionResourceDefinitions(mods ...qm.QueryMod) extensionResourceDefinitionQuery {
	mods = append(mods, qm.From("\"extension_resource_definitions\""), qmhelper.WhereIsNull("\"extension_resource_definitions\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"extension_resource_definitions\".*"})
	}

	return extensionResourceDefinitionQuery{q}
}

// FindExtensionResourceDefinition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExtensionResourceDefinition(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExtensionResourceDefinition, error) {
	extensionResourceDefinitionObj := &ExtensionResourceDefinition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"extension_resource_definitions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, extensionResourceDefinitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from extension_resource_definitions")
	}

	if err = extensionResourceDefinitionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return extensionResourceDefinitionObj, err
	}

	return extensionResourceDefinitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExtensionResourceDefinition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no extension_resource_definitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(extensionResourceDefinitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	extensionResourceDefinitionInsertCacheMut.RLock()
	cache, cached := extensionResourceDefinitionInsertCache[key]
	extensionResourceDefinitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			extensionResourceDefinitionAllColumns,
			extensionResourceDefinitionColumnsWithDefault,
			extensionResourceDefinitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"extension_resource_definitions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"extension_resource_definitions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into extension_resource_definitions")
	}

	if !cached {
		extensionResourceDefinitionInsertCacheMut.Lock()
		extensionResourceDefinitionInsertCache[key] = cache
		extensionResourceDefinitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExtensionResourceDefinition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExtensionResourceDefinition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	extensionResourceDefinitionUpdateCacheMut.RLock()
	cache, cached := extensionResourceDefinitionUpdateCache[key]
	extensionResourceDefinitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			extensionResourceDefinitionAllColumns,
			extensionResourceDefinitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update extension_resource_definitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"extension_resource_definitions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, extensionResourceDefinitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, append(wl, extensionResourceDefinitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update extension_resource_definitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for extension_resource_definitions")
	}

	if !cached {
		extensionResourceDefinitionUpdateCacheMut.Lock()
		extensionResourceDefinitionUpdateCache[key] = cache
		extensionResourceDefinitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q extensionResourceDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for extension_resource_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for extension_resource_definitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExtensionResourceDefinitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), extensionResourceDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"extension_resource_definitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, extensionResourceDefinitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in extensionResourceDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all extensionResourceDefinition")
	}
	return rowsAff, nil
}

// Delete deletes a single ExtensionResourceDefinition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExtensionResourceDefinition) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExtensionResourceDefinition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), extensionResourceDefinitionPrimaryKeyMapping)
		sql = "DELETE FROM \"extension_resource_definitions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"extension_resource_definitions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, append(wl, extensionResourceDefinitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from extension_resource_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for extension_resource_definitions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q extensionResourceDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no extensionResourceDefinitionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from extension_resource_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for extension_resource_definitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExtensionResourceDefinitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(extensionResourceDefinitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), extensionResourceDefinitionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"extension_resource_definitions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, extensionResourceDefinitionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), extensionResourceDefinitionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"extension_resource_definitions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, extensionResourceDefinitionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from extensionResourceDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for extension_resource_definitions")
	}

	if len(extensionResourceDefinitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExtensionResourceDefinition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExtensionResourceDefinition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExtensionResourceDefinitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExtensionResourceDefinitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), extensionResourceDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"extension_resource_definitions\".* FROM \"extension_resource_definitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, extensionResourceDefinitionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExtensionResourceDefinitionSlice")
	}

	*o = slice

	return nil
}

// ExtensionResourceDefinitionExists checks if the ExtensionResourceDefinition row exists.
func ExtensionResourceDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"extension_resource_definitions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if extension_resource_definitions exists")
	}

	return exists, nil
}

// Exists checks if the ExtensionResourceDefinition row exists.
func (o *ExtensionResourceDefinition) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExtensionResourceDefinitionExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExtensionResourceDefinition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no extension_resource_definitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(extensionResourceDefinitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	extensionResourceDefinitionUpsertCacheMut.RLock()
	cache, cached := extensionResourceDefinitionUpsertCache[key]
	extensionResourceDefinitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			extensionResourceDefinitionAllColumns,
			extensionResourceDefinitionColumnsWithDefault,
			extensionResourceDefinitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			extensionResourceDefinitionAllColumns,
			extensionResourceDefinitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert extension_resource_definitions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(extensionResourceDefinitionPrimaryKeyColumns))
			copy(conflict, extensionResourceDefinitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"extension_resource_definitions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(extensionResourceDefinitionType, extensionResourceDefinitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert extension_resource_definitions")
	}

	if !cached {
		extensionResourceDefinitionUpsertCacheMut.Lock()
		extensionResourceDefinitionUpsertCache[key] = cache
		extensionResourceDefinitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
