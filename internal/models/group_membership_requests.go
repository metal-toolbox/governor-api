// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupMembershipRequest is an object representing the database table.
type GroupMembershipRequest struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID        string    `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	UserID         string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	IsAdmin        bool      `boil:"is_admin" json:"is_admin" toml:"is_admin" yaml:"is_admin"`
	Note           string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	ExpiresAt      null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	Kind           string    `boil:"kind" json:"kind" toml:"kind" yaml:"kind"`
	AdminExpiresAt null.Time `boil:"admin_expires_at" json:"admin_expires_at,omitempty" toml:"admin_expires_at" yaml:"admin_expires_at,omitempty"`

	R *groupMembershipRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupMembershipRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupMembershipRequestColumns = struct {
	ID             string
	GroupID        string
	UserID         string
	CreatedAt      string
	UpdatedAt      string
	IsAdmin        string
	Note           string
	ExpiresAt      string
	Kind           string
	AdminExpiresAt string
}{
	ID:             "id",
	GroupID:        "group_id",
	UserID:         "user_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	IsAdmin:        "is_admin",
	Note:           "note",
	ExpiresAt:      "expires_at",
	Kind:           "kind",
	AdminExpiresAt: "admin_expires_at",
}

var GroupMembershipRequestTableColumns = struct {
	ID             string
	GroupID        string
	UserID         string
	CreatedAt      string
	UpdatedAt      string
	IsAdmin        string
	Note           string
	ExpiresAt      string
	Kind           string
	AdminExpiresAt string
}{
	ID:             "group_membership_requests.id",
	GroupID:        "group_membership_requests.group_id",
	UserID:         "group_membership_requests.user_id",
	CreatedAt:      "group_membership_requests.created_at",
	UpdatedAt:      "group_membership_requests.updated_at",
	IsAdmin:        "group_membership_requests.is_admin",
	Note:           "group_membership_requests.note",
	ExpiresAt:      "group_membership_requests.expires_at",
	Kind:           "group_membership_requests.kind",
	AdminExpiresAt: "group_membership_requests.admin_expires_at",
}

// Generated where

var GroupMembershipRequestWhere = struct {
	ID             whereHelperstring
	GroupID        whereHelperstring
	UserID         whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	IsAdmin        whereHelperbool
	Note           whereHelperstring
	ExpiresAt      whereHelpernull_Time
	Kind           whereHelperstring
	AdminExpiresAt whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"group_membership_requests\".\"id\""},
	GroupID:        whereHelperstring{field: "\"group_membership_requests\".\"group_id\""},
	UserID:         whereHelperstring{field: "\"group_membership_requests\".\"user_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"group_membership_requests\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"group_membership_requests\".\"updated_at\""},
	IsAdmin:        whereHelperbool{field: "\"group_membership_requests\".\"is_admin\""},
	Note:           whereHelperstring{field: "\"group_membership_requests\".\"note\""},
	ExpiresAt:      whereHelpernull_Time{field: "\"group_membership_requests\".\"expires_at\""},
	Kind:           whereHelperstring{field: "\"group_membership_requests\".\"kind\""},
	AdminExpiresAt: whereHelpernull_Time{field: "\"group_membership_requests\".\"admin_expires_at\""},
}

// GroupMembershipRequestRels is where relationship names are stored.
var GroupMembershipRequestRels = struct {
	User  string
	Group string
}{
	User:  "User",
	Group: "Group",
}

// groupMembershipRequestR is where relationships are stored.
type groupMembershipRequestR struct {
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
	Group *Group `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
}

// NewStruct creates a new relationship struct
func (*groupMembershipRequestR) NewStruct() *groupMembershipRequestR {
	return &groupMembershipRequestR{}
}

func (r *groupMembershipRequestR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *groupMembershipRequestR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

// groupMembershipRequestL is where Load methods for each relationship are stored.
type groupMembershipRequestL struct{}

var (
	groupMembershipRequestAllColumns            = []string{"id", "group_id", "user_id", "created_at", "updated_at", "is_admin", "note", "expires_at", "kind", "admin_expires_at"}
	groupMembershipRequestColumnsWithoutDefault = []string{"group_id", "user_id", "created_at", "updated_at"}
	groupMembershipRequestColumnsWithDefault    = []string{"id", "is_admin", "note", "expires_at", "kind", "admin_expires_at"}
	groupMembershipRequestPrimaryKeyColumns     = []string{"id"}
	groupMembershipRequestGeneratedColumns      = []string{}
)

type (
	// GroupMembershipRequestSlice is an alias for a slice of pointers to GroupMembershipRequest.
	// This should almost always be used instead of []GroupMembershipRequest.
	GroupMembershipRequestSlice []*GroupMembershipRequest
	// GroupMembershipRequestHook is the signature for custom GroupMembershipRequest hook methods
	GroupMembershipRequestHook func(context.Context, boil.ContextExecutor, *GroupMembershipRequest) error

	groupMembershipRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupMembershipRequestType                 = reflect.TypeOf(&GroupMembershipRequest{})
	groupMembershipRequestMapping              = queries.MakeStructMapping(groupMembershipRequestType)
	groupMembershipRequestPrimaryKeyMapping, _ = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, groupMembershipRequestPrimaryKeyColumns)
	groupMembershipRequestInsertCacheMut       sync.RWMutex
	groupMembershipRequestInsertCache          = make(map[string]insertCache)
	groupMembershipRequestUpdateCacheMut       sync.RWMutex
	groupMembershipRequestUpdateCache          = make(map[string]updateCache)
	groupMembershipRequestUpsertCacheMut       sync.RWMutex
	groupMembershipRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupMembershipRequestAfterSelectHooks []GroupMembershipRequestHook

var groupMembershipRequestBeforeInsertHooks []GroupMembershipRequestHook
var groupMembershipRequestAfterInsertHooks []GroupMembershipRequestHook

var groupMembershipRequestBeforeUpdateHooks []GroupMembershipRequestHook
var groupMembershipRequestAfterUpdateHooks []GroupMembershipRequestHook

var groupMembershipRequestBeforeDeleteHooks []GroupMembershipRequestHook
var groupMembershipRequestAfterDeleteHooks []GroupMembershipRequestHook

var groupMembershipRequestBeforeUpsertHooks []GroupMembershipRequestHook
var groupMembershipRequestAfterUpsertHooks []GroupMembershipRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupMembershipRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupMembershipRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupMembershipRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupMembershipRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupMembershipRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupMembershipRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupMembershipRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupMembershipRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupMembershipRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupMembershipRequestHook registers your hook function for all future operations.
func AddGroupMembershipRequestHook(hookPoint boil.HookPoint, groupMembershipRequestHook GroupMembershipRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupMembershipRequestAfterSelectHooks = append(groupMembershipRequestAfterSelectHooks, groupMembershipRequestHook)
	case boil.BeforeInsertHook:
		groupMembershipRequestBeforeInsertHooks = append(groupMembershipRequestBeforeInsertHooks, groupMembershipRequestHook)
	case boil.AfterInsertHook:
		groupMembershipRequestAfterInsertHooks = append(groupMembershipRequestAfterInsertHooks, groupMembershipRequestHook)
	case boil.BeforeUpdateHook:
		groupMembershipRequestBeforeUpdateHooks = append(groupMembershipRequestBeforeUpdateHooks, groupMembershipRequestHook)
	case boil.AfterUpdateHook:
		groupMembershipRequestAfterUpdateHooks = append(groupMembershipRequestAfterUpdateHooks, groupMembershipRequestHook)
	case boil.BeforeDeleteHook:
		groupMembershipRequestBeforeDeleteHooks = append(groupMembershipRequestBeforeDeleteHooks, groupMembershipRequestHook)
	case boil.AfterDeleteHook:
		groupMembershipRequestAfterDeleteHooks = append(groupMembershipRequestAfterDeleteHooks, groupMembershipRequestHook)
	case boil.BeforeUpsertHook:
		groupMembershipRequestBeforeUpsertHooks = append(groupMembershipRequestBeforeUpsertHooks, groupMembershipRequestHook)
	case boil.AfterUpsertHook:
		groupMembershipRequestAfterUpsertHooks = append(groupMembershipRequestAfterUpsertHooks, groupMembershipRequestHook)
	}
}

// One returns a single groupMembershipRequest record from the query.
func (q groupMembershipRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupMembershipRequest, error) {
	o := &GroupMembershipRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_membership_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupMembershipRequest records from the query.
func (q groupMembershipRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupMembershipRequestSlice, error) {
	var o []*GroupMembershipRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupMembershipRequest slice")
	}

	if len(groupMembershipRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupMembershipRequest records in the query.
func (q groupMembershipRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_membership_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupMembershipRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_membership_requests exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *GroupMembershipRequest) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Group pointed to by the foreign key.
func (o *GroupMembershipRequest) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMembershipRequestL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMembershipRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupMembershipRequest
	var object *GroupMembershipRequest

	if singular {
		var ok bool
		object, ok = maybeGroupMembershipRequest.(*GroupMembershipRequest)
		if !ok {
			object = new(GroupMembershipRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMembershipRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMembershipRequest))
			}
		}
	} else {
		s, ok := maybeGroupMembershipRequest.(*[]*GroupMembershipRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMembershipRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMembershipRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupMembershipRequestR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMembershipRequestR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GroupMembershipRequests = append(foreign.R.GroupMembershipRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GroupMembershipRequests = append(foreign.R.GroupMembershipRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMembershipRequestL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMembershipRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupMembershipRequest
	var object *GroupMembershipRequest

	if singular {
		var ok bool
		object, ok = maybeGroupMembershipRequest.(*GroupMembershipRequest)
		if !ok {
			object = new(GroupMembershipRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMembershipRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMembershipRequest))
			}
		}
	} else {
		s, ok := maybeGroupMembershipRequest.(*[]*GroupMembershipRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMembershipRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMembershipRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupMembershipRequestR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMembershipRequestR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupMembershipRequests = append(foreign.R.GroupMembershipRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupMembershipRequests = append(foreign.R.GroupMembershipRequests, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the groupMembershipRequest to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembershipRequests.
func (o *GroupMembershipRequest) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_membership_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupMembershipRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &groupMembershipRequestR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GroupMembershipRequests: GroupMembershipRequestSlice{o},
		}
	} else {
		related.R.GroupMembershipRequests = append(related.R.GroupMembershipRequests, o)
	}

	return nil
}

// SetGroup of the groupMembershipRequest to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembershipRequests.
func (o *GroupMembershipRequest) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_membership_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupMembershipRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupMembershipRequestR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupMembershipRequests: GroupMembershipRequestSlice{o},
		}
	} else {
		related.R.GroupMembershipRequests = append(related.R.GroupMembershipRequests, o)
	}

	return nil
}

// GroupMembershipRequests retrieves all the records using an executor.
func GroupMembershipRequests(mods ...qm.QueryMod) groupMembershipRequestQuery {
	mods = append(mods, qm.From("\"group_membership_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"group_membership_requests\".*"})
	}

	return groupMembershipRequestQuery{q}
}

// FindGroupMembershipRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupMembershipRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GroupMembershipRequest, error) {
	groupMembershipRequestObj := &GroupMembershipRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_membership_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupMembershipRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_membership_requests")
	}

	if err = groupMembershipRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupMembershipRequestObj, err
	}

	return groupMembershipRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupMembershipRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_membership_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMembershipRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupMembershipRequestInsertCacheMut.RLock()
	cache, cached := groupMembershipRequestInsertCache[key]
	groupMembershipRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupMembershipRequestAllColumns,
			groupMembershipRequestColumnsWithDefault,
			groupMembershipRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_membership_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_membership_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_membership_requests")
	}

	if !cached {
		groupMembershipRequestInsertCacheMut.Lock()
		groupMembershipRequestInsertCache[key] = cache
		groupMembershipRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupMembershipRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupMembershipRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupMembershipRequestUpdateCacheMut.RLock()
	cache, cached := groupMembershipRequestUpdateCache[key]
	groupMembershipRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupMembershipRequestAllColumns,
			groupMembershipRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_membership_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_membership_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupMembershipRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, append(wl, groupMembershipRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_membership_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_membership_requests")
	}

	if !cached {
		groupMembershipRequestUpdateCacheMut.Lock()
		groupMembershipRequestUpdateCache[key] = cache
		groupMembershipRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupMembershipRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_membership_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_membership_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupMembershipRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_membership_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupMembershipRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupMembershipRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupMembershipRequest")
	}
	return rowsAff, nil
}

// Delete deletes a single GroupMembershipRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupMembershipRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupMembershipRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupMembershipRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"group_membership_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_membership_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_membership_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupMembershipRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupMembershipRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_membership_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_membership_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupMembershipRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupMembershipRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_membership_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupMembershipRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupMembershipRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_membership_requests")
	}

	if len(groupMembershipRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupMembershipRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupMembershipRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupMembershipRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupMembershipRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_membership_requests\".* FROM \"group_membership_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupMembershipRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupMembershipRequestSlice")
	}

	*o = slice

	return nil
}

// GroupMembershipRequestExists checks if the GroupMembershipRequest row exists.
func GroupMembershipRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_membership_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_membership_requests exists")
	}

	return exists, nil
}

// Exists checks if the GroupMembershipRequest row exists.
func (o *GroupMembershipRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupMembershipRequestExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupMembershipRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_membership_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMembershipRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupMembershipRequestUpsertCacheMut.RLock()
	cache, cached := groupMembershipRequestUpsertCache[key]
	groupMembershipRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupMembershipRequestAllColumns,
			groupMembershipRequestColumnsWithDefault,
			groupMembershipRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupMembershipRequestAllColumns,
			groupMembershipRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_membership_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupMembershipRequestPrimaryKeyColumns))
			copy(conflict, groupMembershipRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"group_membership_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupMembershipRequestType, groupMembershipRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_membership_requests")
	}

	if !cached {
		groupMembershipRequestUpsertCacheMut.Lock()
		groupMembershipRequestUpsertCache[key] = cache
		groupMembershipRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
