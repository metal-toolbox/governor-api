// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// SystemExtensionResource is an object representing the database table.
type SystemExtensionResource struct {
	ID                            string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Resource                      types.JSON `boil:"resource" json:"resource" toml:"resource" yaml:"resource"`
	CreatedAt                     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                     null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ExtensionResourceDefinitionID string     `boil:"extension_resource_definition_id" json:"extension_resource_definition_id" toml:"extension_resource_definition_id" yaml:"extension_resource_definition_id"`

	R *systemExtensionResourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemExtensionResourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemExtensionResourceColumns = struct {
	ID                            string
	Resource                      string
	CreatedAt                     string
	UpdatedAt                     string
	DeletedAt                     string
	ExtensionResourceDefinitionID string
}{
	ID:                            "id",
	Resource:                      "resource",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
	DeletedAt:                     "deleted_at",
	ExtensionResourceDefinitionID: "extension_resource_definition_id",
}

var SystemExtensionResourceTableColumns = struct {
	ID                            string
	Resource                      string
	CreatedAt                     string
	UpdatedAt                     string
	DeletedAt                     string
	ExtensionResourceDefinitionID string
}{
	ID:                            "system_extension_resources.id",
	Resource:                      "system_extension_resources.resource",
	CreatedAt:                     "system_extension_resources.created_at",
	UpdatedAt:                     "system_extension_resources.updated_at",
	DeletedAt:                     "system_extension_resources.deleted_at",
	ExtensionResourceDefinitionID: "system_extension_resources.extension_resource_definition_id",
}

// Generated where

var SystemExtensionResourceWhere = struct {
	ID                            whereHelperstring
	Resource                      whereHelpertypes_JSON
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpertime_Time
	DeletedAt                     whereHelpernull_Time
	ExtensionResourceDefinitionID whereHelperstring
}{
	ID:                            whereHelperstring{field: "\"system_extension_resources\".\"id\""},
	Resource:                      whereHelpertypes_JSON{field: "\"system_extension_resources\".\"resource\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"system_extension_resources\".\"created_at\""},
	UpdatedAt:                     whereHelpertime_Time{field: "\"system_extension_resources\".\"updated_at\""},
	DeletedAt:                     whereHelpernull_Time{field: "\"system_extension_resources\".\"deleted_at\""},
	ExtensionResourceDefinitionID: whereHelperstring{field: "\"system_extension_resources\".\"extension_resource_definition_id\""},
}

// SystemExtensionResourceRels is where relationship names are stored.
var SystemExtensionResourceRels = struct {
	ExtensionResourceDefinition string
}{
	ExtensionResourceDefinition: "ExtensionResourceDefinition",
}

// systemExtensionResourceR is where relationships are stored.
type systemExtensionResourceR struct {
	ExtensionResourceDefinition *ExtensionResourceDefinition `boil:"ExtensionResourceDefinition" json:"ExtensionResourceDefinition" toml:"ExtensionResourceDefinition" yaml:"ExtensionResourceDefinition"`
}

// NewStruct creates a new relationship struct
func (*systemExtensionResourceR) NewStruct() *systemExtensionResourceR {
	return &systemExtensionResourceR{}
}

func (r *systemExtensionResourceR) GetExtensionResourceDefinition() *ExtensionResourceDefinition {
	if r == nil {
		return nil
	}
	return r.ExtensionResourceDefinition
}

// systemExtensionResourceL is where Load methods for each relationship are stored.
type systemExtensionResourceL struct{}

var (
	systemExtensionResourceAllColumns            = []string{"id", "resource", "created_at", "updated_at", "deleted_at", "extension_resource_definition_id"}
	systemExtensionResourceColumnsWithoutDefault = []string{"resource", "extension_resource_definition_id"}
	systemExtensionResourceColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	systemExtensionResourcePrimaryKeyColumns     = []string{"id"}
	systemExtensionResourceGeneratedColumns      = []string{}
)

type (
	// SystemExtensionResourceSlice is an alias for a slice of pointers to SystemExtensionResource.
	// This should almost always be used instead of []SystemExtensionResource.
	SystemExtensionResourceSlice []*SystemExtensionResource
	// SystemExtensionResourceHook is the signature for custom SystemExtensionResource hook methods
	SystemExtensionResourceHook func(context.Context, boil.ContextExecutor, *SystemExtensionResource) error

	systemExtensionResourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemExtensionResourceType                 = reflect.TypeOf(&SystemExtensionResource{})
	systemExtensionResourceMapping              = queries.MakeStructMapping(systemExtensionResourceType)
	systemExtensionResourcePrimaryKeyMapping, _ = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, systemExtensionResourcePrimaryKeyColumns)
	systemExtensionResourceInsertCacheMut       sync.RWMutex
	systemExtensionResourceInsertCache          = make(map[string]insertCache)
	systemExtensionResourceUpdateCacheMut       sync.RWMutex
	systemExtensionResourceUpdateCache          = make(map[string]updateCache)
	systemExtensionResourceUpsertCacheMut       sync.RWMutex
	systemExtensionResourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var systemExtensionResourceAfterSelectHooks []SystemExtensionResourceHook

var systemExtensionResourceBeforeInsertHooks []SystemExtensionResourceHook
var systemExtensionResourceAfterInsertHooks []SystemExtensionResourceHook

var systemExtensionResourceBeforeUpdateHooks []SystemExtensionResourceHook
var systemExtensionResourceAfterUpdateHooks []SystemExtensionResourceHook

var systemExtensionResourceBeforeDeleteHooks []SystemExtensionResourceHook
var systemExtensionResourceAfterDeleteHooks []SystemExtensionResourceHook

var systemExtensionResourceBeforeUpsertHooks []SystemExtensionResourceHook
var systemExtensionResourceAfterUpsertHooks []SystemExtensionResourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SystemExtensionResource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SystemExtensionResource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SystemExtensionResource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SystemExtensionResource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SystemExtensionResource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SystemExtensionResource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SystemExtensionResource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SystemExtensionResource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SystemExtensionResource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemExtensionResourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSystemExtensionResourceHook registers your hook function for all future operations.
func AddSystemExtensionResourceHook(hookPoint boil.HookPoint, systemExtensionResourceHook SystemExtensionResourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		systemExtensionResourceAfterSelectHooks = append(systemExtensionResourceAfterSelectHooks, systemExtensionResourceHook)
	case boil.BeforeInsertHook:
		systemExtensionResourceBeforeInsertHooks = append(systemExtensionResourceBeforeInsertHooks, systemExtensionResourceHook)
	case boil.AfterInsertHook:
		systemExtensionResourceAfterInsertHooks = append(systemExtensionResourceAfterInsertHooks, systemExtensionResourceHook)
	case boil.BeforeUpdateHook:
		systemExtensionResourceBeforeUpdateHooks = append(systemExtensionResourceBeforeUpdateHooks, systemExtensionResourceHook)
	case boil.AfterUpdateHook:
		systemExtensionResourceAfterUpdateHooks = append(systemExtensionResourceAfterUpdateHooks, systemExtensionResourceHook)
	case boil.BeforeDeleteHook:
		systemExtensionResourceBeforeDeleteHooks = append(systemExtensionResourceBeforeDeleteHooks, systemExtensionResourceHook)
	case boil.AfterDeleteHook:
		systemExtensionResourceAfterDeleteHooks = append(systemExtensionResourceAfterDeleteHooks, systemExtensionResourceHook)
	case boil.BeforeUpsertHook:
		systemExtensionResourceBeforeUpsertHooks = append(systemExtensionResourceBeforeUpsertHooks, systemExtensionResourceHook)
	case boil.AfterUpsertHook:
		systemExtensionResourceAfterUpsertHooks = append(systemExtensionResourceAfterUpsertHooks, systemExtensionResourceHook)
	}
}

// One returns a single systemExtensionResource record from the query.
func (q systemExtensionResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SystemExtensionResource, error) {
	o := &SystemExtensionResource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for system_extension_resources")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SystemExtensionResource records from the query.
func (q systemExtensionResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SystemExtensionResourceSlice, error) {
	var o []*SystemExtensionResource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SystemExtensionResource slice")
	}

	if len(systemExtensionResourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SystemExtensionResource records in the query.
func (q systemExtensionResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count system_extension_resources rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q systemExtensionResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if system_extension_resources exists")
	}

	return count > 0, nil
}

// ExtensionResourceDefinition pointed to by the foreign key.
func (o *SystemExtensionResource) ExtensionResourceDefinition(mods ...qm.QueryMod) extensionResourceDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExtensionResourceDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	return ExtensionResourceDefinitions(queryMods...)
}

// LoadExtensionResourceDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (systemExtensionResourceL) LoadExtensionResourceDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSystemExtensionResource interface{}, mods queries.Applicator) error {
	var slice []*SystemExtensionResource
	var object *SystemExtensionResource

	if singular {
		var ok bool
		object, ok = maybeSystemExtensionResource.(*SystemExtensionResource)
		if !ok {
			object = new(SystemExtensionResource)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSystemExtensionResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSystemExtensionResource))
			}
		}
	} else {
		s, ok := maybeSystemExtensionResource.(*[]*SystemExtensionResource)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSystemExtensionResource)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSystemExtensionResource))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &systemExtensionResourceR{}
		}
		args = append(args, object.ExtensionResourceDefinitionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &systemExtensionResourceR{}
			}

			for _, a := range args {
				if a == obj.ExtensionResourceDefinitionID {
					continue Outer
				}
			}

			args = append(args, obj.ExtensionResourceDefinitionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`extension_resource_definitions`),
		qm.WhereIn(`extension_resource_definitions.id in ?`, args...),
		qmhelper.WhereIsNull(`extension_resource_definitions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExtensionResourceDefinition")
	}

	var resultSlice []*ExtensionResourceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExtensionResourceDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for extension_resource_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for extension_resource_definitions")
	}

	if len(extensionResourceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExtensionResourceDefinition = foreign
		if foreign.R == nil {
			foreign.R = &extensionResourceDefinitionR{}
		}
		foreign.R.SystemExtensionResources = append(foreign.R.SystemExtensionResources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExtensionResourceDefinitionID == foreign.ID {
				local.R.ExtensionResourceDefinition = foreign
				if foreign.R == nil {
					foreign.R = &extensionResourceDefinitionR{}
				}
				foreign.R.SystemExtensionResources = append(foreign.R.SystemExtensionResources, local)
				break
			}
		}
	}

	return nil
}

// SetExtensionResourceDefinition of the systemExtensionResource to the related item.
// Sets o.R.ExtensionResourceDefinition to related.
// Adds o to related.R.SystemExtensionResources.
func (o *SystemExtensionResource) SetExtensionResourceDefinition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ExtensionResourceDefinition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"system_extension_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"extension_resource_definition_id"}),
		strmangle.WhereClause("\"", "\"", 2, systemExtensionResourcePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExtensionResourceDefinitionID = related.ID
	if o.R == nil {
		o.R = &systemExtensionResourceR{
			ExtensionResourceDefinition: related,
		}
	} else {
		o.R.ExtensionResourceDefinition = related
	}

	if related.R == nil {
		related.R = &extensionResourceDefinitionR{
			SystemExtensionResources: SystemExtensionResourceSlice{o},
		}
	} else {
		related.R.SystemExtensionResources = append(related.R.SystemExtensionResources, o)
	}

	return nil
}

// SystemExtensionResources retrieves all the records using an executor.
func SystemExtensionResources(mods ...qm.QueryMod) systemExtensionResourceQuery {
	mods = append(mods, qm.From("\"system_extension_resources\""), qmhelper.WhereIsNull("\"system_extension_resources\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"system_extension_resources\".*"})
	}

	return systemExtensionResourceQuery{q}
}

// FindSystemExtensionResource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystemExtensionResource(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SystemExtensionResource, error) {
	systemExtensionResourceObj := &SystemExtensionResource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"system_extension_resources\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, systemExtensionResourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from system_extension_resources")
	}

	if err = systemExtensionResourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return systemExtensionResourceObj, err
	}

	return systemExtensionResourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SystemExtensionResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no system_extension_resources provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemExtensionResourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemExtensionResourceInsertCacheMut.RLock()
	cache, cached := systemExtensionResourceInsertCache[key]
	systemExtensionResourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemExtensionResourceAllColumns,
			systemExtensionResourceColumnsWithDefault,
			systemExtensionResourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"system_extension_resources\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"system_extension_resources\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into system_extension_resources")
	}

	if !cached {
		systemExtensionResourceInsertCacheMut.Lock()
		systemExtensionResourceInsertCache[key] = cache
		systemExtensionResourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SystemExtensionResource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SystemExtensionResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	systemExtensionResourceUpdateCacheMut.RLock()
	cache, cached := systemExtensionResourceUpdateCache[key]
	systemExtensionResourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemExtensionResourceAllColumns,
			systemExtensionResourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update system_extension_resources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"system_extension_resources\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, systemExtensionResourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, append(wl, systemExtensionResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update system_extension_resources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for system_extension_resources")
	}

	if !cached {
		systemExtensionResourceUpdateCacheMut.Lock()
		systemExtensionResourceUpdateCache[key] = cache
		systemExtensionResourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q systemExtensionResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for system_extension_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for system_extension_resources")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemExtensionResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemExtensionResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"system_extension_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, systemExtensionResourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in systemExtensionResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all systemExtensionResource")
	}
	return rowsAff, nil
}

// Delete deletes a single SystemExtensionResource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SystemExtensionResource) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SystemExtensionResource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemExtensionResourcePrimaryKeyMapping)
		sql = "DELETE FROM \"system_extension_resources\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"system_extension_resources\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, append(wl, systemExtensionResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from system_extension_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for system_extension_resources")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q systemExtensionResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no systemExtensionResourceQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from system_extension_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_extension_resources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemExtensionResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(systemExtensionResourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemExtensionResourcePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"system_extension_resources\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemExtensionResourcePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemExtensionResourcePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"system_extension_resources\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, systemExtensionResourcePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from systemExtensionResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for system_extension_resources")
	}

	if len(systemExtensionResourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SystemExtensionResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSystemExtensionResource(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemExtensionResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemExtensionResourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemExtensionResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"system_extension_resources\".* FROM \"system_extension_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemExtensionResourcePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SystemExtensionResourceSlice")
	}

	*o = slice

	return nil
}

// SystemExtensionResourceExists checks if the SystemExtensionResource row exists.
func SystemExtensionResourceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"system_extension_resources\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if system_extension_resources exists")
	}

	return exists, nil
}

// Exists checks if the SystemExtensionResource row exists.
func (o *SystemExtensionResource) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SystemExtensionResourceExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SystemExtensionResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no system_extension_resources provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemExtensionResourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	systemExtensionResourceUpsertCacheMut.RLock()
	cache, cached := systemExtensionResourceUpsertCache[key]
	systemExtensionResourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			systemExtensionResourceAllColumns,
			systemExtensionResourceColumnsWithDefault,
			systemExtensionResourceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			systemExtensionResourceAllColumns,
			systemExtensionResourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert system_extension_resources, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(systemExtensionResourcePrimaryKeyColumns))
			copy(conflict, systemExtensionResourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"system_extension_resources\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(systemExtensionResourceType, systemExtensionResourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert system_extension_resources")
	}

	if !cached {
		systemExtensionResourceUpsertCacheMut.Lock()
		systemExtensionResourceUpsertCache[key] = cache
		systemExtensionResourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
