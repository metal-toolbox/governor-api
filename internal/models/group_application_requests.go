// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupApplicationRequest is an object representing the database table.
type GroupApplicationRequest struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID         string      `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	ApplicationID   string      `boil:"application_id" json:"application_id" toml:"application_id" yaml:"application_id"`
	ApproverGroupID string      `boil:"approver_group_id" json:"approver_group_id" toml:"approver_group_id" yaml:"approver_group_id"`
	RequesterUserID string      `boil:"requester_user_id" json:"requester_user_id" toml:"requester_user_id" yaml:"requester_user_id"`
	Note            null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *groupApplicationRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupApplicationRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupApplicationRequestColumns = struct {
	ID              string
	GroupID         string
	ApplicationID   string
	ApproverGroupID string
	RequesterUserID string
	Note            string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	GroupID:         "group_id",
	ApplicationID:   "application_id",
	ApproverGroupID: "approver_group_id",
	RequesterUserID: "requester_user_id",
	Note:            "note",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var GroupApplicationRequestTableColumns = struct {
	ID              string
	GroupID         string
	ApplicationID   string
	ApproverGroupID string
	RequesterUserID string
	Note            string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "group_application_requests.id",
	GroupID:         "group_application_requests.group_id",
	ApplicationID:   "group_application_requests.application_id",
	ApproverGroupID: "group_application_requests.approver_group_id",
	RequesterUserID: "group_application_requests.requester_user_id",
	Note:            "group_application_requests.note",
	CreatedAt:       "group_application_requests.created_at",
	UpdatedAt:       "group_application_requests.updated_at",
}

// Generated where

var GroupApplicationRequestWhere = struct {
	ID              whereHelperstring
	GroupID         whereHelperstring
	ApplicationID   whereHelperstring
	ApproverGroupID whereHelperstring
	RequesterUserID whereHelperstring
	Note            whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"group_application_requests\".\"id\""},
	GroupID:         whereHelperstring{field: "\"group_application_requests\".\"group_id\""},
	ApplicationID:   whereHelperstring{field: "\"group_application_requests\".\"application_id\""},
	ApproverGroupID: whereHelperstring{field: "\"group_application_requests\".\"approver_group_id\""},
	RequesterUserID: whereHelperstring{field: "\"group_application_requests\".\"requester_user_id\""},
	Note:            whereHelpernull_String{field: "\"group_application_requests\".\"note\""},
	CreatedAt:       whereHelpertime_Time{field: "\"group_application_requests\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"group_application_requests\".\"updated_at\""},
}

// GroupApplicationRequestRels is where relationship names are stored.
var GroupApplicationRequestRels = struct {
	RequesterUser string
	Group         string
	ApproverGroup string
	Application   string
}{
	RequesterUser: "RequesterUser",
	Group:         "Group",
	ApproverGroup: "ApproverGroup",
	Application:   "Application",
}

// groupApplicationRequestR is where relationships are stored.
type groupApplicationRequestR struct {
	RequesterUser *User        `boil:"RequesterUser" json:"RequesterUser" toml:"RequesterUser" yaml:"RequesterUser"`
	Group         *Group       `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	ApproverGroup *Group       `boil:"ApproverGroup" json:"ApproverGroup" toml:"ApproverGroup" yaml:"ApproverGroup"`
	Application   *Application `boil:"Application" json:"Application" toml:"Application" yaml:"Application"`
}

// NewStruct creates a new relationship struct
func (*groupApplicationRequestR) NewStruct() *groupApplicationRequestR {
	return &groupApplicationRequestR{}
}

func (r *groupApplicationRequestR) GetRequesterUser() *User {
	if r == nil {
		return nil
	}
	return r.RequesterUser
}

func (r *groupApplicationRequestR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *groupApplicationRequestR) GetApproverGroup() *Group {
	if r == nil {
		return nil
	}
	return r.ApproverGroup
}

func (r *groupApplicationRequestR) GetApplication() *Application {
	if r == nil {
		return nil
	}
	return r.Application
}

// groupApplicationRequestL is where Load methods for each relationship are stored.
type groupApplicationRequestL struct{}

var (
	groupApplicationRequestAllColumns            = []string{"id", "group_id", "application_id", "approver_group_id", "requester_user_id", "note", "created_at", "updated_at"}
	groupApplicationRequestColumnsWithoutDefault = []string{"group_id", "application_id", "approver_group_id", "requester_user_id"}
	groupApplicationRequestColumnsWithDefault    = []string{"id", "note", "created_at", "updated_at"}
	groupApplicationRequestPrimaryKeyColumns     = []string{"id"}
	groupApplicationRequestGeneratedColumns      = []string{}
)

type (
	// GroupApplicationRequestSlice is an alias for a slice of pointers to GroupApplicationRequest.
	// This should almost always be used instead of []GroupApplicationRequest.
	GroupApplicationRequestSlice []*GroupApplicationRequest
	// GroupApplicationRequestHook is the signature for custom GroupApplicationRequest hook methods
	GroupApplicationRequestHook func(context.Context, boil.ContextExecutor, *GroupApplicationRequest) error

	groupApplicationRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupApplicationRequestType                 = reflect.TypeOf(&GroupApplicationRequest{})
	groupApplicationRequestMapping              = queries.MakeStructMapping(groupApplicationRequestType)
	groupApplicationRequestPrimaryKeyMapping, _ = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, groupApplicationRequestPrimaryKeyColumns)
	groupApplicationRequestInsertCacheMut       sync.RWMutex
	groupApplicationRequestInsertCache          = make(map[string]insertCache)
	groupApplicationRequestUpdateCacheMut       sync.RWMutex
	groupApplicationRequestUpdateCache          = make(map[string]updateCache)
	groupApplicationRequestUpsertCacheMut       sync.RWMutex
	groupApplicationRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupApplicationRequestAfterSelectHooks []GroupApplicationRequestHook

var groupApplicationRequestBeforeInsertHooks []GroupApplicationRequestHook
var groupApplicationRequestAfterInsertHooks []GroupApplicationRequestHook

var groupApplicationRequestBeforeUpdateHooks []GroupApplicationRequestHook
var groupApplicationRequestAfterUpdateHooks []GroupApplicationRequestHook

var groupApplicationRequestBeforeDeleteHooks []GroupApplicationRequestHook
var groupApplicationRequestAfterDeleteHooks []GroupApplicationRequestHook

var groupApplicationRequestBeforeUpsertHooks []GroupApplicationRequestHook
var groupApplicationRequestAfterUpsertHooks []GroupApplicationRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupApplicationRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupApplicationRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupApplicationRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupApplicationRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupApplicationRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupApplicationRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupApplicationRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupApplicationRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupApplicationRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupApplicationRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupApplicationRequestHook registers your hook function for all future operations.
func AddGroupApplicationRequestHook(hookPoint boil.HookPoint, groupApplicationRequestHook GroupApplicationRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupApplicationRequestAfterSelectHooks = append(groupApplicationRequestAfterSelectHooks, groupApplicationRequestHook)
	case boil.BeforeInsertHook:
		groupApplicationRequestBeforeInsertHooks = append(groupApplicationRequestBeforeInsertHooks, groupApplicationRequestHook)
	case boil.AfterInsertHook:
		groupApplicationRequestAfterInsertHooks = append(groupApplicationRequestAfterInsertHooks, groupApplicationRequestHook)
	case boil.BeforeUpdateHook:
		groupApplicationRequestBeforeUpdateHooks = append(groupApplicationRequestBeforeUpdateHooks, groupApplicationRequestHook)
	case boil.AfterUpdateHook:
		groupApplicationRequestAfterUpdateHooks = append(groupApplicationRequestAfterUpdateHooks, groupApplicationRequestHook)
	case boil.BeforeDeleteHook:
		groupApplicationRequestBeforeDeleteHooks = append(groupApplicationRequestBeforeDeleteHooks, groupApplicationRequestHook)
	case boil.AfterDeleteHook:
		groupApplicationRequestAfterDeleteHooks = append(groupApplicationRequestAfterDeleteHooks, groupApplicationRequestHook)
	case boil.BeforeUpsertHook:
		groupApplicationRequestBeforeUpsertHooks = append(groupApplicationRequestBeforeUpsertHooks, groupApplicationRequestHook)
	case boil.AfterUpsertHook:
		groupApplicationRequestAfterUpsertHooks = append(groupApplicationRequestAfterUpsertHooks, groupApplicationRequestHook)
	}
}

// One returns a single groupApplicationRequest record from the query.
func (q groupApplicationRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupApplicationRequest, error) {
	o := &GroupApplicationRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_application_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupApplicationRequest records from the query.
func (q groupApplicationRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupApplicationRequestSlice, error) {
	var o []*GroupApplicationRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupApplicationRequest slice")
	}

	if len(groupApplicationRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupApplicationRequest records in the query.
func (q groupApplicationRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_application_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupApplicationRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_application_requests exists")
	}

	return count > 0, nil
}

// RequesterUser pointed to by the foreign key.
func (o *GroupApplicationRequest) RequesterUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequesterUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Group pointed to by the foreign key.
func (o *GroupApplicationRequest) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// ApproverGroup pointed to by the foreign key.
func (o *GroupApplicationRequest) ApproverGroup(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApproverGroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// Application pointed to by the foreign key.
func (o *GroupApplicationRequest) Application(mods ...qm.QueryMod) applicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicationID),
	}

	queryMods = append(queryMods, mods...)

	return Applications(queryMods...)
}

// LoadRequesterUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupApplicationRequestL) LoadRequesterUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupApplicationRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupApplicationRequest
	var object *GroupApplicationRequest

	if singular {
		var ok bool
		object, ok = maybeGroupApplicationRequest.(*GroupApplicationRequest)
		if !ok {
			object = new(GroupApplicationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupApplicationRequest))
			}
		}
	} else {
		s, ok := maybeGroupApplicationRequest.(*[]*GroupApplicationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupApplicationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupApplicationRequestR{}
		}
		args = append(args, object.RequesterUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupApplicationRequestR{}
			}

			for _, a := range args {
				if a == obj.RequesterUserID {
					continue Outer
				}
			}

			args = append(args, obj.RequesterUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RequesterUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RequesterUserGroupApplicationRequests = append(foreign.R.RequesterUserGroupApplicationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequesterUserID == foreign.ID {
				local.R.RequesterUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RequesterUserGroupApplicationRequests = append(foreign.R.RequesterUserGroupApplicationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupApplicationRequestL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupApplicationRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupApplicationRequest
	var object *GroupApplicationRequest

	if singular {
		var ok bool
		object, ok = maybeGroupApplicationRequest.(*GroupApplicationRequest)
		if !ok {
			object = new(GroupApplicationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupApplicationRequest))
			}
		}
	} else {
		s, ok := maybeGroupApplicationRequest.(*[]*GroupApplicationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupApplicationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupApplicationRequestR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupApplicationRequestR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupApplicationRequests = append(foreign.R.GroupApplicationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupApplicationRequests = append(foreign.R.GroupApplicationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadApproverGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupApplicationRequestL) LoadApproverGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupApplicationRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupApplicationRequest
	var object *GroupApplicationRequest

	if singular {
		var ok bool
		object, ok = maybeGroupApplicationRequest.(*GroupApplicationRequest)
		if !ok {
			object = new(GroupApplicationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupApplicationRequest))
			}
		}
	} else {
		s, ok := maybeGroupApplicationRequest.(*[]*GroupApplicationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupApplicationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupApplicationRequestR{}
		}
		args = append(args, object.ApproverGroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupApplicationRequestR{}
			}

			for _, a := range args {
				if a == obj.ApproverGroupID {
					continue Outer
				}
			}

			args = append(args, obj.ApproverGroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ApproverGroup = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.ApproverGroupGroupApplicationRequests = append(foreign.R.ApproverGroupGroupApplicationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApproverGroupID == foreign.ID {
				local.R.ApproverGroup = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.ApproverGroupGroupApplicationRequests = append(foreign.R.ApproverGroupGroupApplicationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadApplication allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupApplicationRequestL) LoadApplication(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupApplicationRequest interface{}, mods queries.Applicator) error {
	var slice []*GroupApplicationRequest
	var object *GroupApplicationRequest

	if singular {
		var ok bool
		object, ok = maybeGroupApplicationRequest.(*GroupApplicationRequest)
		if !ok {
			object = new(GroupApplicationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupApplicationRequest))
			}
		}
	} else {
		s, ok := maybeGroupApplicationRequest.(*[]*GroupApplicationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupApplicationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupApplicationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupApplicationRequestR{}
		}
		args = append(args, object.ApplicationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupApplicationRequestR{}
			}

			for _, a := range args {
				if a == obj.ApplicationID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.id in ?`, args...),
		qmhelper.WhereIsNull(`applications.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Application")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Application")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(applicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Application = foreign
		if foreign.R == nil {
			foreign.R = &applicationR{}
		}
		foreign.R.GroupApplicationRequests = append(foreign.R.GroupApplicationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicationID == foreign.ID {
				local.R.Application = foreign
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.GroupApplicationRequests = append(foreign.R.GroupApplicationRequests, local)
				break
			}
		}
	}

	return nil
}

// SetRequesterUser of the groupApplicationRequest to the related item.
// Sets o.R.RequesterUser to related.
// Adds o to related.R.RequesterUserGroupApplicationRequests.
func (o *GroupApplicationRequest) SetRequesterUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_application_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"requester_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupApplicationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequesterUserID = related.ID
	if o.R == nil {
		o.R = &groupApplicationRequestR{
			RequesterUser: related,
		}
	} else {
		o.R.RequesterUser = related
	}

	if related.R == nil {
		related.R = &userR{
			RequesterUserGroupApplicationRequests: GroupApplicationRequestSlice{o},
		}
	} else {
		related.R.RequesterUserGroupApplicationRequests = append(related.R.RequesterUserGroupApplicationRequests, o)
	}

	return nil
}

// SetGroup of the groupApplicationRequest to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupApplicationRequests.
func (o *GroupApplicationRequest) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_application_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupApplicationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupApplicationRequestR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupApplicationRequests: GroupApplicationRequestSlice{o},
		}
	} else {
		related.R.GroupApplicationRequests = append(related.R.GroupApplicationRequests, o)
	}

	return nil
}

// SetApproverGroup of the groupApplicationRequest to the related item.
// Sets o.R.ApproverGroup to related.
// Adds o to related.R.ApproverGroupGroupApplicationRequests.
func (o *GroupApplicationRequest) SetApproverGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_application_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"approver_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupApplicationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApproverGroupID = related.ID
	if o.R == nil {
		o.R = &groupApplicationRequestR{
			ApproverGroup: related,
		}
	} else {
		o.R.ApproverGroup = related
	}

	if related.R == nil {
		related.R = &groupR{
			ApproverGroupGroupApplicationRequests: GroupApplicationRequestSlice{o},
		}
	} else {
		related.R.ApproverGroupGroupApplicationRequests = append(related.R.ApproverGroupGroupApplicationRequests, o)
	}

	return nil
}

// SetApplication of the groupApplicationRequest to the related item.
// Sets o.R.Application to related.
// Adds o to related.R.GroupApplicationRequests.
func (o *GroupApplicationRequest) SetApplication(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Application) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_application_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"application_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupApplicationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicationID = related.ID
	if o.R == nil {
		o.R = &groupApplicationRequestR{
			Application: related,
		}
	} else {
		o.R.Application = related
	}

	if related.R == nil {
		related.R = &applicationR{
			GroupApplicationRequests: GroupApplicationRequestSlice{o},
		}
	} else {
		related.R.GroupApplicationRequests = append(related.R.GroupApplicationRequests, o)
	}

	return nil
}

// GroupApplicationRequests retrieves all the records using an executor.
func GroupApplicationRequests(mods ...qm.QueryMod) groupApplicationRequestQuery {
	mods = append(mods, qm.From("\"group_application_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"group_application_requests\".*"})
	}

	return groupApplicationRequestQuery{q}
}

// FindGroupApplicationRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupApplicationRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GroupApplicationRequest, error) {
	groupApplicationRequestObj := &GroupApplicationRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_application_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupApplicationRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_application_requests")
	}

	if err = groupApplicationRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupApplicationRequestObj, err
	}

	return groupApplicationRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupApplicationRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_application_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupApplicationRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupApplicationRequestInsertCacheMut.RLock()
	cache, cached := groupApplicationRequestInsertCache[key]
	groupApplicationRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupApplicationRequestAllColumns,
			groupApplicationRequestColumnsWithDefault,
			groupApplicationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_application_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_application_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_application_requests")
	}

	if !cached {
		groupApplicationRequestInsertCacheMut.Lock()
		groupApplicationRequestInsertCache[key] = cache
		groupApplicationRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupApplicationRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupApplicationRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupApplicationRequestUpdateCacheMut.RLock()
	cache, cached := groupApplicationRequestUpdateCache[key]
	groupApplicationRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupApplicationRequestAllColumns,
			groupApplicationRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_application_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_application_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupApplicationRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, append(wl, groupApplicationRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_application_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_application_requests")
	}

	if !cached {
		groupApplicationRequestUpdateCacheMut.Lock()
		groupApplicationRequestUpdateCache[key] = cache
		groupApplicationRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupApplicationRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_application_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_application_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupApplicationRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupApplicationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_application_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupApplicationRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupApplicationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupApplicationRequest")
	}
	return rowsAff, nil
}

// Delete deletes a single GroupApplicationRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupApplicationRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupApplicationRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupApplicationRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"group_application_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_application_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_application_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupApplicationRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupApplicationRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_application_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_application_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupApplicationRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupApplicationRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupApplicationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_application_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupApplicationRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupApplicationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_application_requests")
	}

	if len(groupApplicationRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupApplicationRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupApplicationRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupApplicationRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupApplicationRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupApplicationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_application_requests\".* FROM \"group_application_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupApplicationRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupApplicationRequestSlice")
	}

	*o = slice

	return nil
}

// GroupApplicationRequestExists checks if the GroupApplicationRequest row exists.
func GroupApplicationRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_application_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_application_requests exists")
	}

	return exists, nil
}

// Exists checks if the GroupApplicationRequest row exists.
func (o *GroupApplicationRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupApplicationRequestExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupApplicationRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_application_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupApplicationRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupApplicationRequestUpsertCacheMut.RLock()
	cache, cached := groupApplicationRequestUpsertCache[key]
	groupApplicationRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupApplicationRequestAllColumns,
			groupApplicationRequestColumnsWithDefault,
			groupApplicationRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupApplicationRequestAllColumns,
			groupApplicationRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_application_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupApplicationRequestPrimaryKeyColumns))
			copy(conflict, groupApplicationRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"group_application_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupApplicationRequestType, groupApplicationRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_application_requests")
	}

	if !cached {
		groupApplicationRequestUpsertCacheMut.Lock()
		groupApplicationRequestUpsertCache[key] = cache
		groupApplicationRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
