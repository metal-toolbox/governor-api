// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationType is an object representing the database table.
type NotificationType struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug           string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Description    string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	DefaultEnabled bool      `boil:"default_enabled" json:"default_enabled" toml:"default_enabled" yaml:"default_enabled"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *notificationTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationTypeColumns = struct {
	ID             string
	Name           string
	Slug           string
	Description    string
	DefaultEnabled string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	Name:           "name",
	Slug:           "slug",
	Description:    "description",
	DefaultEnabled: "default_enabled",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var NotificationTypeTableColumns = struct {
	ID             string
	Name           string
	Slug           string
	Description    string
	DefaultEnabled string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "notification_types.id",
	Name:           "notification_types.name",
	Slug:           "notification_types.slug",
	Description:    "notification_types.description",
	DefaultEnabled: "notification_types.default_enabled",
	CreatedAt:      "notification_types.created_at",
	UpdatedAt:      "notification_types.updated_at",
	DeletedAt:      "notification_types.deleted_at",
}

// Generated where

var NotificationTypeWhere = struct {
	ID             whereHelperstring
	Name           whereHelperstring
	Slug           whereHelperstring
	Description    whereHelperstring
	DefaultEnabled whereHelperbool
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"notification_types\".\"id\""},
	Name:           whereHelperstring{field: "\"notification_types\".\"name\""},
	Slug:           whereHelperstring{field: "\"notification_types\".\"slug\""},
	Description:    whereHelperstring{field: "\"notification_types\".\"description\""},
	DefaultEnabled: whereHelperbool{field: "\"notification_types\".\"default_enabled\""},
	CreatedAt:      whereHelpertime_Time{field: "\"notification_types\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"notification_types\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"notification_types\".\"deleted_at\""},
}

// NotificationTypeRels is where relationship names are stored.
var NotificationTypeRels = struct {
	NotificationPreferences string
}{
	NotificationPreferences: "NotificationPreferences",
}

// notificationTypeR is where relationships are stored.
type notificationTypeR struct {
	NotificationPreferences NotificationPreferenceSlice `boil:"NotificationPreferences" json:"NotificationPreferences" toml:"NotificationPreferences" yaml:"NotificationPreferences"`
}

// NewStruct creates a new relationship struct
func (*notificationTypeR) NewStruct() *notificationTypeR {
	return &notificationTypeR{}
}

func (r *notificationTypeR) GetNotificationPreferences() NotificationPreferenceSlice {
	if r == nil {
		return nil
	}
	return r.NotificationPreferences
}

// notificationTypeL is where Load methods for each relationship are stored.
type notificationTypeL struct{}

var (
	notificationTypeAllColumns            = []string{"id", "name", "slug", "description", "default_enabled", "created_at", "updated_at", "deleted_at"}
	notificationTypeColumnsWithoutDefault = []string{"name", "slug", "description", "default_enabled"}
	notificationTypeColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	notificationTypePrimaryKeyColumns     = []string{"id"}
	notificationTypeGeneratedColumns      = []string{}
)

type (
	// NotificationTypeSlice is an alias for a slice of pointers to NotificationType.
	// This should almost always be used instead of []NotificationType.
	NotificationTypeSlice []*NotificationType
	// NotificationTypeHook is the signature for custom NotificationType hook methods
	NotificationTypeHook func(context.Context, boil.ContextExecutor, *NotificationType) error

	notificationTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationTypeType                 = reflect.TypeOf(&NotificationType{})
	notificationTypeMapping              = queries.MakeStructMapping(notificationTypeType)
	notificationTypePrimaryKeyMapping, _ = queries.BindMapping(notificationTypeType, notificationTypeMapping, notificationTypePrimaryKeyColumns)
	notificationTypeInsertCacheMut       sync.RWMutex
	notificationTypeInsertCache          = make(map[string]insertCache)
	notificationTypeUpdateCacheMut       sync.RWMutex
	notificationTypeUpdateCache          = make(map[string]updateCache)
	notificationTypeUpsertCacheMut       sync.RWMutex
	notificationTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationTypeAfterSelectHooks []NotificationTypeHook

var notificationTypeBeforeInsertHooks []NotificationTypeHook
var notificationTypeAfterInsertHooks []NotificationTypeHook

var notificationTypeBeforeUpdateHooks []NotificationTypeHook
var notificationTypeAfterUpdateHooks []NotificationTypeHook

var notificationTypeBeforeDeleteHooks []NotificationTypeHook
var notificationTypeAfterDeleteHooks []NotificationTypeHook

var notificationTypeBeforeUpsertHooks []NotificationTypeHook
var notificationTypeAfterUpsertHooks []NotificationTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationTypeHook registers your hook function for all future operations.
func AddNotificationTypeHook(hookPoint boil.HookPoint, notificationTypeHook NotificationTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationTypeAfterSelectHooks = append(notificationTypeAfterSelectHooks, notificationTypeHook)
	case boil.BeforeInsertHook:
		notificationTypeBeforeInsertHooks = append(notificationTypeBeforeInsertHooks, notificationTypeHook)
	case boil.AfterInsertHook:
		notificationTypeAfterInsertHooks = append(notificationTypeAfterInsertHooks, notificationTypeHook)
	case boil.BeforeUpdateHook:
		notificationTypeBeforeUpdateHooks = append(notificationTypeBeforeUpdateHooks, notificationTypeHook)
	case boil.AfterUpdateHook:
		notificationTypeAfterUpdateHooks = append(notificationTypeAfterUpdateHooks, notificationTypeHook)
	case boil.BeforeDeleteHook:
		notificationTypeBeforeDeleteHooks = append(notificationTypeBeforeDeleteHooks, notificationTypeHook)
	case boil.AfterDeleteHook:
		notificationTypeAfterDeleteHooks = append(notificationTypeAfterDeleteHooks, notificationTypeHook)
	case boil.BeforeUpsertHook:
		notificationTypeBeforeUpsertHooks = append(notificationTypeBeforeUpsertHooks, notificationTypeHook)
	case boil.AfterUpsertHook:
		notificationTypeAfterUpsertHooks = append(notificationTypeAfterUpsertHooks, notificationTypeHook)
	}
}

// One returns a single notificationType record from the query.
func (q notificationTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationType, error) {
	o := &NotificationType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationType records from the query.
func (q notificationTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationTypeSlice, error) {
	var o []*NotificationType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotificationType slice")
	}

	if len(notificationTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationType records in the query.
func (q notificationTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification_types exists")
	}

	return count > 0, nil
}

// NotificationPreferences retrieves all the notification_preference's NotificationPreferences with an executor.
func (o *NotificationType) NotificationPreferences(mods ...qm.QueryMod) notificationPreferenceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification_preferences\".\"notification_type_id\"=?", o.ID),
	)

	return NotificationPreferences(queryMods...)
}

// LoadNotificationPreferences allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (notificationTypeL) LoadNotificationPreferences(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationType interface{}, mods queries.Applicator) error {
	var slice []*NotificationType
	var object *NotificationType

	if singular {
		var ok bool
		object, ok = maybeNotificationType.(*NotificationType)
		if !ok {
			object = new(NotificationType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationType))
			}
		}
	} else {
		s, ok := maybeNotificationType.(*[]*NotificationType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notification_preferences`),
		qm.WhereIn(`notification_preferences.notification_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification_preferences")
	}

	var resultSlice []*NotificationPreference
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification_preferences")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification_preferences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_preferences")
	}

	if len(notificationPreferenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NotificationPreferences = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationPreferenceR{}
			}
			foreign.R.NotificationType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NotificationTypeID {
				local.R.NotificationPreferences = append(local.R.NotificationPreferences, foreign)
				if foreign.R == nil {
					foreign.R = &notificationPreferenceR{}
				}
				foreign.R.NotificationType = local
				break
			}
		}
	}

	return nil
}

// AddNotificationPreferences adds the given related objects to the existing relationships
// of the notification_type, optionally inserting them as new records.
// Appends related to o.R.NotificationPreferences.
// Sets related.R.NotificationType appropriately.
func (o *NotificationType) AddNotificationPreferences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotificationPreference) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NotificationTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification_preferences\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"notification_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPreferencePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NotificationTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &notificationTypeR{
			NotificationPreferences: related,
		}
	} else {
		o.R.NotificationPreferences = append(o.R.NotificationPreferences, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationPreferenceR{
				NotificationType: o,
			}
		} else {
			rel.R.NotificationType = o
		}
	}
	return nil
}

// NotificationTypes retrieves all the records using an executor.
func NotificationTypes(mods ...qm.QueryMod) notificationTypeQuery {
	mods = append(mods, qm.From("\"notification_types\""), qmhelper.WhereIsNull("\"notification_types\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"notification_types\".*"})
	}

	return notificationTypeQuery{q}
}

// FindNotificationType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationType(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*NotificationType, error) {
	notificationTypeObj := &NotificationType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification_types\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, notificationTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification_types")
	}

	if err = notificationTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationTypeObj, err
	}

	return notificationTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationTypeInsertCacheMut.RLock()
	cache, cached := notificationTypeInsertCache[key]
	notificationTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationTypeAllColumns,
			notificationTypeColumnsWithDefault,
			notificationTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification_types")
	}

	if !cached {
		notificationTypeInsertCacheMut.Lock()
		notificationTypeInsertCache[key] = cache
		notificationTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationTypeUpdateCacheMut.RLock()
	cache, cached := notificationTypeUpdateCache[key]
	notificationTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationTypeAllColumns,
			notificationTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notification_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, append(wl, notificationTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notification_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notification_types")
	}

	if !cached {
		notificationTypeUpdateCacheMut.Lock()
		notificationTypeUpdateCache[key] = cache
		notificationTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notification_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notification_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notification_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notificationTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notificationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notificationType")
	}
	return rowsAff, nil
}

// Delete deletes a single NotificationType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationType) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NotificationType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationTypePrimaryKeyMapping)
		sql = "DELETE FROM \"notification_types\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"notification_types\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(notificationTypeType, notificationTypeMapping, append(wl, notificationTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notification_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notification_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationTypeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"notification_types\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationTypePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"notification_types\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, notificationTypePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notificationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_types")
	}

	if len(notificationTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notification_types\".* FROM \"notification_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationTypePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationTypeSlice")
	}

	*o = slice

	return nil
}

// NotificationTypeExists checks if the NotificationType row exists.
func NotificationTypeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notification_types\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification_types exists")
	}

	return exists, nil
}

// Exists checks if the NotificationType row exists.
func (o *NotificationType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationTypeExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationTypeUpsertCacheMut.RLock()
	cache, cached := notificationTypeUpsertCache[key]
	notificationTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationTypeAllColumns,
			notificationTypeColumnsWithDefault,
			notificationTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationTypeAllColumns,
			notificationTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notification_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationTypePrimaryKeyColumns))
			copy(conflict, notificationTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"notification_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationTypeType, notificationTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notification_types")
	}

	if !cached {
		notificationTypeUpsertCacheMut.Lock()
		notificationTypeUpsertCache[key] = cache
		notificationTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
