// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AuditEvent is an object representing the database table.
type AuditEvent struct {
	ID                    string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	ActorID               null.String       `boil:"actor_id" json:"actor_id,omitempty" toml:"actor_id" yaml:"actor_id,omitempty"`
	Action                string            `boil:"action" json:"action" toml:"action" yaml:"action"`
	Message               string            `boil:"message" json:"message" toml:"message" yaml:"message"`
	Changeset             types.StringArray `boil:"changeset" json:"changeset" toml:"changeset" yaml:"changeset"`
	SubjectGroupID        null.String       `boil:"subject_group_id" json:"subject_group_id,omitempty" toml:"subject_group_id" yaml:"subject_group_id,omitempty"`
	SubjectUserID         null.String       `boil:"subject_user_id" json:"subject_user_id,omitempty" toml:"subject_user_id" yaml:"subject_user_id,omitempty"`
	CreatedAt             time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	SubjectOrganizationID null.String       `boil:"subject_organization_id" json:"subject_organization_id,omitempty" toml:"subject_organization_id" yaml:"subject_organization_id,omitempty"`
	SubjectApplicationID  null.String       `boil:"subject_application_id" json:"subject_application_id,omitempty" toml:"subject_application_id" yaml:"subject_application_id,omitempty"`
	ParentID              null.String       `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`

	R *auditEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auditEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuditEventColumns = struct {
	ID                    string
	ActorID               string
	Action                string
	Message               string
	Changeset             string
	SubjectGroupID        string
	SubjectUserID         string
	CreatedAt             string
	SubjectOrganizationID string
	SubjectApplicationID  string
	ParentID              string
}{
	ID:                    "id",
	ActorID:               "actor_id",
	Action:                "action",
	Message:               "message",
	Changeset:             "changeset",
	SubjectGroupID:        "subject_group_id",
	SubjectUserID:         "subject_user_id",
	CreatedAt:             "created_at",
	SubjectOrganizationID: "subject_organization_id",
	SubjectApplicationID:  "subject_application_id",
	ParentID:              "parent_id",
}

var AuditEventTableColumns = struct {
	ID                    string
	ActorID               string
	Action                string
	Message               string
	Changeset             string
	SubjectGroupID        string
	SubjectUserID         string
	CreatedAt             string
	SubjectOrganizationID string
	SubjectApplicationID  string
	ParentID              string
}{
	ID:                    "audit_events.id",
	ActorID:               "audit_events.actor_id",
	Action:                "audit_events.action",
	Message:               "audit_events.message",
	Changeset:             "audit_events.changeset",
	SubjectGroupID:        "audit_events.subject_group_id",
	SubjectUserID:         "audit_events.subject_user_id",
	CreatedAt:             "audit_events.created_at",
	SubjectOrganizationID: "audit_events.subject_organization_id",
	SubjectApplicationID:  "audit_events.subject_application_id",
	ParentID:              "audit_events.parent_id",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuditEventWhere = struct {
	ID                    whereHelperstring
	ActorID               whereHelpernull_String
	Action                whereHelperstring
	Message               whereHelperstring
	Changeset             whereHelpertypes_StringArray
	SubjectGroupID        whereHelpernull_String
	SubjectUserID         whereHelpernull_String
	CreatedAt             whereHelpertime_Time
	SubjectOrganizationID whereHelpernull_String
	SubjectApplicationID  whereHelpernull_String
	ParentID              whereHelpernull_String
}{
	ID:                    whereHelperstring{field: "\"audit_events\".\"id\""},
	ActorID:               whereHelpernull_String{field: "\"audit_events\".\"actor_id\""},
	Action:                whereHelperstring{field: "\"audit_events\".\"action\""},
	Message:               whereHelperstring{field: "\"audit_events\".\"message\""},
	Changeset:             whereHelpertypes_StringArray{field: "\"audit_events\".\"changeset\""},
	SubjectGroupID:        whereHelpernull_String{field: "\"audit_events\".\"subject_group_id\""},
	SubjectUserID:         whereHelpernull_String{field: "\"audit_events\".\"subject_user_id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"audit_events\".\"created_at\""},
	SubjectOrganizationID: whereHelpernull_String{field: "\"audit_events\".\"subject_organization_id\""},
	SubjectApplicationID:  whereHelpernull_String{field: "\"audit_events\".\"subject_application_id\""},
	ParentID:              whereHelpernull_String{field: "\"audit_events\".\"parent_id\""},
}

// AuditEventRels is where relationship names are stored.
var AuditEventRels = struct {
	SubjectUser         string
	SubjectOrganization string
	SubjectGroup        string
	SubjectApplication  string
	Actor               string
}{
	SubjectUser:         "SubjectUser",
	SubjectOrganization: "SubjectOrganization",
	SubjectGroup:        "SubjectGroup",
	SubjectApplication:  "SubjectApplication",
	Actor:               "Actor",
}

// auditEventR is where relationships are stored.
type auditEventR struct {
	SubjectUser         *User         `boil:"SubjectUser" json:"SubjectUser" toml:"SubjectUser" yaml:"SubjectUser"`
	SubjectOrganization *Organization `boil:"SubjectOrganization" json:"SubjectOrganization" toml:"SubjectOrganization" yaml:"SubjectOrganization"`
	SubjectGroup        *Group        `boil:"SubjectGroup" json:"SubjectGroup" toml:"SubjectGroup" yaml:"SubjectGroup"`
	SubjectApplication  *Application  `boil:"SubjectApplication" json:"SubjectApplication" toml:"SubjectApplication" yaml:"SubjectApplication"`
	Actor               *User         `boil:"Actor" json:"Actor" toml:"Actor" yaml:"Actor"`
}

// NewStruct creates a new relationship struct
func (*auditEventR) NewStruct() *auditEventR {
	return &auditEventR{}
}

func (r *auditEventR) GetSubjectUser() *User {
	if r == nil {
		return nil
	}
	return r.SubjectUser
}

func (r *auditEventR) GetSubjectOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.SubjectOrganization
}

func (r *auditEventR) GetSubjectGroup() *Group {
	if r == nil {
		return nil
	}
	return r.SubjectGroup
}

func (r *auditEventR) GetSubjectApplication() *Application {
	if r == nil {
		return nil
	}
	return r.SubjectApplication
}

func (r *auditEventR) GetActor() *User {
	if r == nil {
		return nil
	}
	return r.Actor
}

// auditEventL is where Load methods for each relationship are stored.
type auditEventL struct{}

var (
	auditEventAllColumns            = []string{"id", "actor_id", "action", "message", "changeset", "subject_group_id", "subject_user_id", "created_at", "subject_organization_id", "subject_application_id", "parent_id"}
	auditEventColumnsWithoutDefault = []string{"action", "message", "created_at"}
	auditEventColumnsWithDefault    = []string{"id", "actor_id", "changeset", "subject_group_id", "subject_user_id", "subject_organization_id", "subject_application_id", "parent_id"}
	auditEventPrimaryKeyColumns     = []string{"id"}
	auditEventGeneratedColumns      = []string{}
)

type (
	// AuditEventSlice is an alias for a slice of pointers to AuditEvent.
	// This should almost always be used instead of []AuditEvent.
	AuditEventSlice []*AuditEvent
	// AuditEventHook is the signature for custom AuditEvent hook methods
	AuditEventHook func(context.Context, boil.ContextExecutor, *AuditEvent) error

	auditEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auditEventType                 = reflect.TypeOf(&AuditEvent{})
	auditEventMapping              = queries.MakeStructMapping(auditEventType)
	auditEventPrimaryKeyMapping, _ = queries.BindMapping(auditEventType, auditEventMapping, auditEventPrimaryKeyColumns)
	auditEventInsertCacheMut       sync.RWMutex
	auditEventInsertCache          = make(map[string]insertCache)
	auditEventUpdateCacheMut       sync.RWMutex
	auditEventUpdateCache          = make(map[string]updateCache)
	auditEventUpsertCacheMut       sync.RWMutex
	auditEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auditEventAfterSelectHooks []AuditEventHook

var auditEventBeforeInsertHooks []AuditEventHook
var auditEventAfterInsertHooks []AuditEventHook

var auditEventBeforeUpdateHooks []AuditEventHook
var auditEventAfterUpdateHooks []AuditEventHook

var auditEventBeforeDeleteHooks []AuditEventHook
var auditEventAfterDeleteHooks []AuditEventHook

var auditEventBeforeUpsertHooks []AuditEventHook
var auditEventAfterUpsertHooks []AuditEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuditEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuditEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuditEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuditEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuditEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuditEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuditEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuditEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuditEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuditEventHook registers your hook function for all future operations.
func AddAuditEventHook(hookPoint boil.HookPoint, auditEventHook AuditEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		auditEventAfterSelectHooks = append(auditEventAfterSelectHooks, auditEventHook)
	case boil.BeforeInsertHook:
		auditEventBeforeInsertHooks = append(auditEventBeforeInsertHooks, auditEventHook)
	case boil.AfterInsertHook:
		auditEventAfterInsertHooks = append(auditEventAfterInsertHooks, auditEventHook)
	case boil.BeforeUpdateHook:
		auditEventBeforeUpdateHooks = append(auditEventBeforeUpdateHooks, auditEventHook)
	case boil.AfterUpdateHook:
		auditEventAfterUpdateHooks = append(auditEventAfterUpdateHooks, auditEventHook)
	case boil.BeforeDeleteHook:
		auditEventBeforeDeleteHooks = append(auditEventBeforeDeleteHooks, auditEventHook)
	case boil.AfterDeleteHook:
		auditEventAfterDeleteHooks = append(auditEventAfterDeleteHooks, auditEventHook)
	case boil.BeforeUpsertHook:
		auditEventBeforeUpsertHooks = append(auditEventBeforeUpsertHooks, auditEventHook)
	case boil.AfterUpsertHook:
		auditEventAfterUpsertHooks = append(auditEventAfterUpsertHooks, auditEventHook)
	}
}

// One returns a single auditEvent record from the query.
func (q auditEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuditEvent, error) {
	o := &AuditEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for audit_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuditEvent records from the query.
func (q auditEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuditEventSlice, error) {
	var o []*AuditEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuditEvent slice")
	}

	if len(auditEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuditEvent records in the query.
func (q auditEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count audit_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q auditEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if audit_events exists")
	}

	return count > 0, nil
}

// SubjectUser pointed to by the foreign key.
func (o *AuditEvent) SubjectUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// SubjectOrganization pointed to by the foreign key.
func (o *AuditEvent) SubjectOrganization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectOrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// SubjectGroup pointed to by the foreign key.
func (o *AuditEvent) SubjectGroup(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectGroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// SubjectApplication pointed to by the foreign key.
func (o *AuditEvent) SubjectApplication(mods ...qm.QueryMod) applicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectApplicationID),
	}

	queryMods = append(queryMods, mods...)

	return Applications(queryMods...)
}

// Actor pointed to by the foreign key.
func (o *AuditEvent) Actor(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ActorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadSubjectUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auditEventL) LoadSubjectUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuditEvent interface{}, mods queries.Applicator) error {
	var slice []*AuditEvent
	var object *AuditEvent

	if singular {
		var ok bool
		object, ok = maybeAuditEvent.(*AuditEvent)
		if !ok {
			object = new(AuditEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuditEvent))
			}
		}
	} else {
		s, ok := maybeAuditEvent.(*[]*AuditEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuditEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &auditEventR{}
		}
		if !queries.IsNil(object.SubjectUserID) {
			args = append(args, object.SubjectUserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auditEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubjectUserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubjectUserID) {
				args = append(args, obj.SubjectUserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubjectUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SubjectUserAuditEvents = append(foreign.R.SubjectUserAuditEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubjectUserID, foreign.ID) {
				local.R.SubjectUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SubjectUserAuditEvents = append(foreign.R.SubjectUserAuditEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadSubjectOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auditEventL) LoadSubjectOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuditEvent interface{}, mods queries.Applicator) error {
	var slice []*AuditEvent
	var object *AuditEvent

	if singular {
		var ok bool
		object, ok = maybeAuditEvent.(*AuditEvent)
		if !ok {
			object = new(AuditEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuditEvent))
			}
		}
	} else {
		s, ok := maybeAuditEvent.(*[]*AuditEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuditEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &auditEventR{}
		}
		if !queries.IsNil(object.SubjectOrganizationID) {
			args = append(args, object.SubjectOrganizationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auditEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubjectOrganizationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubjectOrganizationID) {
				args = append(args, obj.SubjectOrganizationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
		qmhelper.WhereIsNull(`organizations.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubjectOrganization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.SubjectOrganizationAuditEvents = append(foreign.R.SubjectOrganizationAuditEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubjectOrganizationID, foreign.ID) {
				local.R.SubjectOrganization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.SubjectOrganizationAuditEvents = append(foreign.R.SubjectOrganizationAuditEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadSubjectGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auditEventL) LoadSubjectGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuditEvent interface{}, mods queries.Applicator) error {
	var slice []*AuditEvent
	var object *AuditEvent

	if singular {
		var ok bool
		object, ok = maybeAuditEvent.(*AuditEvent)
		if !ok {
			object = new(AuditEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuditEvent))
			}
		}
	} else {
		s, ok := maybeAuditEvent.(*[]*AuditEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuditEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &auditEventR{}
		}
		if !queries.IsNil(object.SubjectGroupID) {
			args = append(args, object.SubjectGroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auditEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubjectGroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubjectGroupID) {
				args = append(args, obj.SubjectGroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubjectGroup = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.SubjectGroupAuditEvents = append(foreign.R.SubjectGroupAuditEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubjectGroupID, foreign.ID) {
				local.R.SubjectGroup = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.SubjectGroupAuditEvents = append(foreign.R.SubjectGroupAuditEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadSubjectApplication allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auditEventL) LoadSubjectApplication(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuditEvent interface{}, mods queries.Applicator) error {
	var slice []*AuditEvent
	var object *AuditEvent

	if singular {
		var ok bool
		object, ok = maybeAuditEvent.(*AuditEvent)
		if !ok {
			object = new(AuditEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuditEvent))
			}
		}
	} else {
		s, ok := maybeAuditEvent.(*[]*AuditEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuditEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &auditEventR{}
		}
		if !queries.IsNil(object.SubjectApplicationID) {
			args = append(args, object.SubjectApplicationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auditEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SubjectApplicationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SubjectApplicationID) {
				args = append(args, obj.SubjectApplicationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.id in ?`, args...),
		qmhelper.WhereIsNull(`applications.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Application")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Application")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(applicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SubjectApplication = foreign
		if foreign.R == nil {
			foreign.R = &applicationR{}
		}
		foreign.R.SubjectApplicationAuditEvents = append(foreign.R.SubjectApplicationAuditEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SubjectApplicationID, foreign.ID) {
				local.R.SubjectApplication = foreign
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.SubjectApplicationAuditEvents = append(foreign.R.SubjectApplicationAuditEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadActor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auditEventL) LoadActor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuditEvent interface{}, mods queries.Applicator) error {
	var slice []*AuditEvent
	var object *AuditEvent

	if singular {
		var ok bool
		object, ok = maybeAuditEvent.(*AuditEvent)
		if !ok {
			object = new(AuditEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuditEvent))
			}
		}
	} else {
		s, ok := maybeAuditEvent.(*[]*AuditEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuditEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuditEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &auditEventR{}
		}
		if !queries.IsNil(object.ActorID) {
			args = append(args, object.ActorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auditEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ActorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ActorID) {
				args = append(args, obj.ActorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Actor = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ActorAuditEvents = append(foreign.R.ActorAuditEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ActorID, foreign.ID) {
				local.R.Actor = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ActorAuditEvents = append(foreign.R.ActorAuditEvents, local)
				break
			}
		}
	}

	return nil
}

// SetSubjectUser of the auditEvent to the related item.
// Sets o.R.SubjectUser to related.
// Adds o to related.R.SubjectUserAuditEvents.
func (o *AuditEvent) SetSubjectUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, auditEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubjectUserID, related.ID)
	if o.R == nil {
		o.R = &auditEventR{
			SubjectUser: related,
		}
	} else {
		o.R.SubjectUser = related
	}

	if related.R == nil {
		related.R = &userR{
			SubjectUserAuditEvents: AuditEventSlice{o},
		}
	} else {
		related.R.SubjectUserAuditEvents = append(related.R.SubjectUserAuditEvents, o)
	}

	return nil
}

// RemoveSubjectUser relationship.
// Sets o.R.SubjectUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuditEvent) RemoveSubjectUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.SubjectUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subject_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubjectUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubjectUserAuditEvents {
		if queries.Equal(o.SubjectUserID, ri.SubjectUserID) {
			continue
		}

		ln := len(related.R.SubjectUserAuditEvents)
		if ln > 1 && i < ln-1 {
			related.R.SubjectUserAuditEvents[i] = related.R.SubjectUserAuditEvents[ln-1]
		}
		related.R.SubjectUserAuditEvents = related.R.SubjectUserAuditEvents[:ln-1]
		break
	}
	return nil
}

// SetSubjectOrganization of the auditEvent to the related item.
// Sets o.R.SubjectOrganization to related.
// Adds o to related.R.SubjectOrganizationAuditEvents.
func (o *AuditEvent) SetSubjectOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, auditEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubjectOrganizationID, related.ID)
	if o.R == nil {
		o.R = &auditEventR{
			SubjectOrganization: related,
		}
	} else {
		o.R.SubjectOrganization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			SubjectOrganizationAuditEvents: AuditEventSlice{o},
		}
	} else {
		related.R.SubjectOrganizationAuditEvents = append(related.R.SubjectOrganizationAuditEvents, o)
	}

	return nil
}

// RemoveSubjectOrganization relationship.
// Sets o.R.SubjectOrganization to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuditEvent) RemoveSubjectOrganization(ctx context.Context, exec boil.ContextExecutor, related *Organization) error {
	var err error

	queries.SetScanner(&o.SubjectOrganizationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subject_organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubjectOrganization = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubjectOrganizationAuditEvents {
		if queries.Equal(o.SubjectOrganizationID, ri.SubjectOrganizationID) {
			continue
		}

		ln := len(related.R.SubjectOrganizationAuditEvents)
		if ln > 1 && i < ln-1 {
			related.R.SubjectOrganizationAuditEvents[i] = related.R.SubjectOrganizationAuditEvents[ln-1]
		}
		related.R.SubjectOrganizationAuditEvents = related.R.SubjectOrganizationAuditEvents[:ln-1]
		break
	}
	return nil
}

// SetSubjectGroup of the auditEvent to the related item.
// Sets o.R.SubjectGroup to related.
// Adds o to related.R.SubjectGroupAuditEvents.
func (o *AuditEvent) SetSubjectGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, auditEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubjectGroupID, related.ID)
	if o.R == nil {
		o.R = &auditEventR{
			SubjectGroup: related,
		}
	} else {
		o.R.SubjectGroup = related
	}

	if related.R == nil {
		related.R = &groupR{
			SubjectGroupAuditEvents: AuditEventSlice{o},
		}
	} else {
		related.R.SubjectGroupAuditEvents = append(related.R.SubjectGroupAuditEvents, o)
	}

	return nil
}

// RemoveSubjectGroup relationship.
// Sets o.R.SubjectGroup to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuditEvent) RemoveSubjectGroup(ctx context.Context, exec boil.ContextExecutor, related *Group) error {
	var err error

	queries.SetScanner(&o.SubjectGroupID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subject_group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubjectGroup = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubjectGroupAuditEvents {
		if queries.Equal(o.SubjectGroupID, ri.SubjectGroupID) {
			continue
		}

		ln := len(related.R.SubjectGroupAuditEvents)
		if ln > 1 && i < ln-1 {
			related.R.SubjectGroupAuditEvents[i] = related.R.SubjectGroupAuditEvents[ln-1]
		}
		related.R.SubjectGroupAuditEvents = related.R.SubjectGroupAuditEvents[:ln-1]
		break
	}
	return nil
}

// SetSubjectApplication of the auditEvent to the related item.
// Sets o.R.SubjectApplication to related.
// Adds o to related.R.SubjectApplicationAuditEvents.
func (o *AuditEvent) SetSubjectApplication(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Application) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_application_id"}),
		strmangle.WhereClause("\"", "\"", 2, auditEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SubjectApplicationID, related.ID)
	if o.R == nil {
		o.R = &auditEventR{
			SubjectApplication: related,
		}
	} else {
		o.R.SubjectApplication = related
	}

	if related.R == nil {
		related.R = &applicationR{
			SubjectApplicationAuditEvents: AuditEventSlice{o},
		}
	} else {
		related.R.SubjectApplicationAuditEvents = append(related.R.SubjectApplicationAuditEvents, o)
	}

	return nil
}

// RemoveSubjectApplication relationship.
// Sets o.R.SubjectApplication to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuditEvent) RemoveSubjectApplication(ctx context.Context, exec boil.ContextExecutor, related *Application) error {
	var err error

	queries.SetScanner(&o.SubjectApplicationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("subject_application_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SubjectApplication = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SubjectApplicationAuditEvents {
		if queries.Equal(o.SubjectApplicationID, ri.SubjectApplicationID) {
			continue
		}

		ln := len(related.R.SubjectApplicationAuditEvents)
		if ln > 1 && i < ln-1 {
			related.R.SubjectApplicationAuditEvents[i] = related.R.SubjectApplicationAuditEvents[ln-1]
		}
		related.R.SubjectApplicationAuditEvents = related.R.SubjectApplicationAuditEvents[:ln-1]
		break
	}
	return nil
}

// SetActor of the auditEvent to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.ActorAuditEvents.
func (o *AuditEvent) SetActor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"actor_id"}),
		strmangle.WhereClause("\"", "\"", 2, auditEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ActorID, related.ID)
	if o.R == nil {
		o.R = &auditEventR{
			Actor: related,
		}
	} else {
		o.R.Actor = related
	}

	if related.R == nil {
		related.R = &userR{
			ActorAuditEvents: AuditEventSlice{o},
		}
	} else {
		related.R.ActorAuditEvents = append(related.R.ActorAuditEvents, o)
	}

	return nil
}

// RemoveActor relationship.
// Sets o.R.Actor to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuditEvent) RemoveActor(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.ActorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("actor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Actor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ActorAuditEvents {
		if queries.Equal(o.ActorID, ri.ActorID) {
			continue
		}

		ln := len(related.R.ActorAuditEvents)
		if ln > 1 && i < ln-1 {
			related.R.ActorAuditEvents[i] = related.R.ActorAuditEvents[ln-1]
		}
		related.R.ActorAuditEvents = related.R.ActorAuditEvents[:ln-1]
		break
	}
	return nil
}

// AuditEvents retrieves all the records using an executor.
func AuditEvents(mods ...qm.QueryMod) auditEventQuery {
	mods = append(mods, qm.From("\"audit_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"audit_events\".*"})
	}

	return auditEventQuery{q}
}

// FindAuditEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuditEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuditEvent, error) {
	auditEventObj := &AuditEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"audit_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auditEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from audit_events")
	}

	if err = auditEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auditEventObj, err
	}

	return auditEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuditEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no audit_events provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auditEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auditEventInsertCacheMut.RLock()
	cache, cached := auditEventInsertCache[key]
	auditEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auditEventAllColumns,
			auditEventColumnsWithDefault,
			auditEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auditEventType, auditEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auditEventType, auditEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"audit_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"audit_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into audit_events")
	}

	if !cached {
		auditEventInsertCacheMut.Lock()
		auditEventInsertCache[key] = cache
		auditEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuditEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuditEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auditEventUpdateCacheMut.RLock()
	cache, cached := auditEventUpdateCache[key]
	auditEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auditEventAllColumns,
			auditEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update audit_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"audit_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auditEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auditEventType, auditEventMapping, append(wl, auditEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update audit_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for audit_events")
	}

	if !cached {
		auditEventUpdateCacheMut.Lock()
		auditEventUpdateCache[key] = cache
		auditEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q auditEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for audit_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for audit_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuditEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"audit_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auditEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auditEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auditEvent")
	}
	return rowsAff, nil
}

// Delete deletes a single AuditEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuditEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuditEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auditEventPrimaryKeyMapping)
	sql := "DELETE FROM \"audit_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from audit_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for audit_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q auditEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auditEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from audit_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for audit_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuditEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auditEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"audit_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auditEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auditEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for audit_events")
	}

	if len(auditEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuditEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuditEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuditEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuditEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"audit_events\".* FROM \"audit_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auditEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuditEventSlice")
	}

	*o = slice

	return nil
}

// AuditEventExists checks if the AuditEvent row exists.
func AuditEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"audit_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if audit_events exists")
	}

	return exists, nil
}

// Exists checks if the AuditEvent row exists.
func (o *AuditEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuditEventExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuditEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no audit_events provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auditEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auditEventUpsertCacheMut.RLock()
	cache, cached := auditEventUpsertCache[key]
	auditEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			auditEventAllColumns,
			auditEventColumnsWithDefault,
			auditEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			auditEventAllColumns,
			auditEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert audit_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(auditEventPrimaryKeyColumns))
			copy(conflict, auditEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"audit_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(auditEventType, auditEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auditEventType, auditEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert audit_events")
	}

	if !cached {
		auditEventUpsertCacheMut.Lock()
		auditEventUpsertCache[key] = cache
		auditEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
