// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// GroupHierarchy is an object representing the database table.
type GroupHierarchy struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentGroupID string    `boil:"parent_group_id" json:"parent_group_id" toml:"parent_group_id" yaml:"parent_group_id"`
	MemberGroupID string    `boil:"member_group_id" json:"member_group_id" toml:"member_group_id" yaml:"member_group_id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ExpiresAt     null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`

	R *groupHierarchyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupHierarchyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupHierarchyColumns = struct {
	ID            string
	ParentGroupID string
	MemberGroupID string
	CreatedAt     string
	UpdatedAt     string
	ExpiresAt     string
}{
	ID:            "id",
	ParentGroupID: "parent_group_id",
	MemberGroupID: "member_group_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	ExpiresAt:     "expires_at",
}

var GroupHierarchyTableColumns = struct {
	ID            string
	ParentGroupID string
	MemberGroupID string
	CreatedAt     string
	UpdatedAt     string
	ExpiresAt     string
}{
	ID:            "group_hierarchies.id",
	ParentGroupID: "group_hierarchies.parent_group_id",
	MemberGroupID: "group_hierarchies.member_group_id",
	CreatedAt:     "group_hierarchies.created_at",
	UpdatedAt:     "group_hierarchies.updated_at",
	ExpiresAt:     "group_hierarchies.expires_at",
}

// Generated where

var GroupHierarchyWhere = struct {
	ID            whereHelperstring
	ParentGroupID whereHelperstring
	MemberGroupID whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	ExpiresAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"group_hierarchies\".\"id\""},
	ParentGroupID: whereHelperstring{field: "\"group_hierarchies\".\"parent_group_id\""},
	MemberGroupID: whereHelperstring{field: "\"group_hierarchies\".\"member_group_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"group_hierarchies\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"group_hierarchies\".\"updated_at\""},
	ExpiresAt:     whereHelpernull_Time{field: "\"group_hierarchies\".\"expires_at\""},
}

// GroupHierarchyRels is where relationship names are stored.
var GroupHierarchyRels = struct {
	MemberGroup string
	ParentGroup string
}{
	MemberGroup: "MemberGroup",
	ParentGroup: "ParentGroup",
}

// groupHierarchyR is where relationships are stored.
type groupHierarchyR struct {
	MemberGroup *Group `boil:"MemberGroup" json:"MemberGroup" toml:"MemberGroup" yaml:"MemberGroup"`
	ParentGroup *Group `boil:"ParentGroup" json:"ParentGroup" toml:"ParentGroup" yaml:"ParentGroup"`
}

// NewStruct creates a new relationship struct
func (*groupHierarchyR) NewStruct() *groupHierarchyR {
	return &groupHierarchyR{}
}

func (o *GroupHierarchy) GetMemberGroup() *Group {
	if o == nil {
		return nil
	}

	return o.R.GetMemberGroup()
}

func (r *groupHierarchyR) GetMemberGroup() *Group {
	if r == nil {
		return nil
	}

	return r.MemberGroup
}

func (o *GroupHierarchy) GetParentGroup() *Group {
	if o == nil {
		return nil
	}

	return o.R.GetParentGroup()
}

func (r *groupHierarchyR) GetParentGroup() *Group {
	if r == nil {
		return nil
	}

	return r.ParentGroup
}

// groupHierarchyL is where Load methods for each relationship are stored.
type groupHierarchyL struct{}

var (
	groupHierarchyAllColumns            = []string{"id", "parent_group_id", "member_group_id", "created_at", "updated_at", "expires_at"}
	groupHierarchyColumnsWithoutDefault = []string{"parent_group_id", "member_group_id", "created_at", "updated_at"}
	groupHierarchyColumnsWithDefault    = []string{"id", "expires_at"}
	groupHierarchyPrimaryKeyColumns     = []string{"id"}
	groupHierarchyGeneratedColumns      = []string{}
)

type (
	// GroupHierarchySlice is an alias for a slice of pointers to GroupHierarchy.
	// This should almost always be used instead of []GroupHierarchy.
	GroupHierarchySlice []*GroupHierarchy
	// GroupHierarchyHook is the signature for custom GroupHierarchy hook methods
	GroupHierarchyHook func(context.Context, boil.ContextExecutor, *GroupHierarchy) error

	groupHierarchyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupHierarchyType                 = reflect.TypeOf(&GroupHierarchy{})
	groupHierarchyMapping              = queries.MakeStructMapping(groupHierarchyType)
	groupHierarchyPrimaryKeyMapping, _ = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, groupHierarchyPrimaryKeyColumns)
	groupHierarchyInsertCacheMut       sync.RWMutex
	groupHierarchyInsertCache          = make(map[string]insertCache)
	groupHierarchyUpdateCacheMut       sync.RWMutex
	groupHierarchyUpdateCache          = make(map[string]updateCache)
	groupHierarchyUpsertCacheMut       sync.RWMutex
	groupHierarchyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupHierarchyAfterSelectMu sync.Mutex
var groupHierarchyAfterSelectHooks []GroupHierarchyHook

var groupHierarchyBeforeInsertMu sync.Mutex
var groupHierarchyBeforeInsertHooks []GroupHierarchyHook
var groupHierarchyAfterInsertMu sync.Mutex
var groupHierarchyAfterInsertHooks []GroupHierarchyHook

var groupHierarchyBeforeUpdateMu sync.Mutex
var groupHierarchyBeforeUpdateHooks []GroupHierarchyHook
var groupHierarchyAfterUpdateMu sync.Mutex
var groupHierarchyAfterUpdateHooks []GroupHierarchyHook

var groupHierarchyBeforeDeleteMu sync.Mutex
var groupHierarchyBeforeDeleteHooks []GroupHierarchyHook
var groupHierarchyAfterDeleteMu sync.Mutex
var groupHierarchyAfterDeleteHooks []GroupHierarchyHook

var groupHierarchyBeforeUpsertMu sync.Mutex
var groupHierarchyBeforeUpsertHooks []GroupHierarchyHook
var groupHierarchyAfterUpsertMu sync.Mutex
var groupHierarchyAfterUpsertHooks []GroupHierarchyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupHierarchy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupHierarchy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupHierarchy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupHierarchy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupHierarchy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupHierarchy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupHierarchy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupHierarchy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupHierarchy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupHierarchyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupHierarchyHook registers your hook function for all future operations.
func AddGroupHierarchyHook(hookPoint boil.HookPoint, groupHierarchyHook GroupHierarchyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupHierarchyAfterSelectMu.Lock()
		groupHierarchyAfterSelectHooks = append(groupHierarchyAfterSelectHooks, groupHierarchyHook)
		groupHierarchyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		groupHierarchyBeforeInsertMu.Lock()
		groupHierarchyBeforeInsertHooks = append(groupHierarchyBeforeInsertHooks, groupHierarchyHook)
		groupHierarchyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		groupHierarchyAfterInsertMu.Lock()
		groupHierarchyAfterInsertHooks = append(groupHierarchyAfterInsertHooks, groupHierarchyHook)
		groupHierarchyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		groupHierarchyBeforeUpdateMu.Lock()
		groupHierarchyBeforeUpdateHooks = append(groupHierarchyBeforeUpdateHooks, groupHierarchyHook)
		groupHierarchyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		groupHierarchyAfterUpdateMu.Lock()
		groupHierarchyAfterUpdateHooks = append(groupHierarchyAfterUpdateHooks, groupHierarchyHook)
		groupHierarchyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		groupHierarchyBeforeDeleteMu.Lock()
		groupHierarchyBeforeDeleteHooks = append(groupHierarchyBeforeDeleteHooks, groupHierarchyHook)
		groupHierarchyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		groupHierarchyAfterDeleteMu.Lock()
		groupHierarchyAfterDeleteHooks = append(groupHierarchyAfterDeleteHooks, groupHierarchyHook)
		groupHierarchyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		groupHierarchyBeforeUpsertMu.Lock()
		groupHierarchyBeforeUpsertHooks = append(groupHierarchyBeforeUpsertHooks, groupHierarchyHook)
		groupHierarchyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		groupHierarchyAfterUpsertMu.Lock()
		groupHierarchyAfterUpsertHooks = append(groupHierarchyAfterUpsertHooks, groupHierarchyHook)
		groupHierarchyAfterUpsertMu.Unlock()
	}
}

// One returns a single groupHierarchy record from the query.
func (q groupHierarchyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupHierarchy, error) {
	o := &GroupHierarchy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_hierarchies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupHierarchy records from the query.
func (q groupHierarchyQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupHierarchySlice, error) {
	var o []*GroupHierarchy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupHierarchy slice")
	}

	if len(groupHierarchyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupHierarchy records in the query.
func (q groupHierarchyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_hierarchies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupHierarchyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_hierarchies exists")
	}

	return count > 0, nil
}

// MemberGroup pointed to by the foreign key.
func (o *GroupHierarchy) MemberGroup(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MemberGroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// ParentGroup pointed to by the foreign key.
func (o *GroupHierarchy) ParentGroup(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentGroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// LoadMemberGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupHierarchyL) LoadMemberGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupHierarchy interface{}, mods queries.Applicator) error {
	var slice []*GroupHierarchy
	var object *GroupHierarchy

	if singular {
		var ok bool
		object, ok = maybeGroupHierarchy.(*GroupHierarchy)
		if !ok {
			object = new(GroupHierarchy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupHierarchy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupHierarchy))
			}
		}
	} else {
		s, ok := maybeGroupHierarchy.(*[]*GroupHierarchy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupHierarchy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupHierarchy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupHierarchyR{}
		}
		args[object.MemberGroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupHierarchyR{}
			}

			args[obj.MemberGroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MemberGroup = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.MemberGroupGroupHierarchies = append(foreign.R.MemberGroupGroupHierarchies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberGroupID == foreign.ID {
				local.R.MemberGroup = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.MemberGroupGroupHierarchies = append(foreign.R.MemberGroupGroupHierarchies, local)
				break
			}
		}
	}

	return nil
}

// LoadParentGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupHierarchyL) LoadParentGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupHierarchy interface{}, mods queries.Applicator) error {
	var slice []*GroupHierarchy
	var object *GroupHierarchy

	if singular {
		var ok bool
		object, ok = maybeGroupHierarchy.(*GroupHierarchy)
		if !ok {
			object = new(GroupHierarchy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupHierarchy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupHierarchy))
			}
		}
	} else {
		s, ok := maybeGroupHierarchy.(*[]*GroupHierarchy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupHierarchy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupHierarchy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupHierarchyR{}
		}
		args[object.ParentGroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupHierarchyR{}
			}

			args[obj.ParentGroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentGroup = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.ParentGroupGroupHierarchies = append(foreign.R.ParentGroupGroupHierarchies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentGroupID == foreign.ID {
				local.R.ParentGroup = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.ParentGroupGroupHierarchies = append(foreign.R.ParentGroupGroupHierarchies, local)
				break
			}
		}
	}

	return nil
}

// SetMemberGroup of the groupHierarchy to the related item.
// Sets o.R.MemberGroup to related.
// Adds o to related.R.MemberGroupGroupHierarchies.
func (o *GroupHierarchy) SetMemberGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_hierarchies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"member_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupHierarchyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberGroupID = related.ID
	if o.R == nil {
		o.R = &groupHierarchyR{
			MemberGroup: related,
		}
	} else {
		o.R.MemberGroup = related
	}

	if related.R == nil {
		related.R = &groupR{
			MemberGroupGroupHierarchies: GroupHierarchySlice{o},
		}
	} else {
		related.R.MemberGroupGroupHierarchies = append(related.R.MemberGroupGroupHierarchies, o)
	}

	return nil
}

// SetParentGroup of the groupHierarchy to the related item.
// Sets o.R.ParentGroup to related.
// Adds o to related.R.ParentGroupGroupHierarchies.
func (o *GroupHierarchy) SetParentGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_hierarchies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupHierarchyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentGroupID = related.ID
	if o.R == nil {
		o.R = &groupHierarchyR{
			ParentGroup: related,
		}
	} else {
		o.R.ParentGroup = related
	}

	if related.R == nil {
		related.R = &groupR{
			ParentGroupGroupHierarchies: GroupHierarchySlice{o},
		}
	} else {
		related.R.ParentGroupGroupHierarchies = append(related.R.ParentGroupGroupHierarchies, o)
	}

	return nil
}

// GroupHierarchies retrieves all the records using an executor.
func GroupHierarchies(mods ...qm.QueryMod) groupHierarchyQuery {
	mods = append(mods, qm.From("\"group_hierarchies\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"group_hierarchies\".*"})
	}

	return groupHierarchyQuery{q}
}

// FindGroupHierarchy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupHierarchy(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GroupHierarchy, error) {
	groupHierarchyObj := &GroupHierarchy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_hierarchies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupHierarchyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_hierarchies")
	}

	if err = groupHierarchyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupHierarchyObj, err
	}

	return groupHierarchyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupHierarchy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_hierarchies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupHierarchyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupHierarchyInsertCacheMut.RLock()
	cache, cached := groupHierarchyInsertCache[key]
	groupHierarchyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupHierarchyAllColumns,
			groupHierarchyColumnsWithDefault,
			groupHierarchyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_hierarchies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_hierarchies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_hierarchies")
	}

	if !cached {
		groupHierarchyInsertCacheMut.Lock()
		groupHierarchyInsertCache[key] = cache
		groupHierarchyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupHierarchy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupHierarchy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupHierarchyUpdateCacheMut.RLock()
	cache, cached := groupHierarchyUpdateCache[key]
	groupHierarchyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupHierarchyAllColumns,
			groupHierarchyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_hierarchies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_hierarchies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupHierarchyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, append(wl, groupHierarchyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_hierarchies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_hierarchies")
	}

	if !cached {
		groupHierarchyUpdateCacheMut.Lock()
		groupHierarchyUpdateCache[key] = cache
		groupHierarchyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupHierarchyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_hierarchies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_hierarchies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupHierarchySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_hierarchies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupHierarchyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupHierarchy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupHierarchy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupHierarchy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no group_hierarchies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupHierarchyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupHierarchyUpsertCacheMut.RLock()
	cache, cached := groupHierarchyUpsertCache[key]
	groupHierarchyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			groupHierarchyAllColumns,
			groupHierarchyColumnsWithDefault,
			groupHierarchyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupHierarchyAllColumns,
			groupHierarchyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_hierarchies, could not build update column list")
		}

		ret := strmangle.SetComplement(groupHierarchyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(groupHierarchyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert group_hierarchies, could not build conflict column list")
			}

			conflict = make([]string, len(groupHierarchyPrimaryKeyColumns))
			copy(conflict, groupHierarchyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"group_hierarchies\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupHierarchyType, groupHierarchyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_hierarchies")
	}

	if !cached {
		groupHierarchyUpsertCacheMut.Lock()
		groupHierarchyUpsertCache[key] = cache
		groupHierarchyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GroupHierarchy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupHierarchy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupHierarchy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupHierarchyPrimaryKeyMapping)
	sql := "DELETE FROM \"group_hierarchies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_hierarchies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_hierarchies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupHierarchyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupHierarchyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_hierarchies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_hierarchies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupHierarchySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupHierarchyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_hierarchies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupHierarchyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupHierarchy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_hierarchies")
	}

	if len(groupHierarchyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupHierarchy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupHierarchy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupHierarchySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupHierarchySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupHierarchyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_hierarchies\".* FROM \"group_hierarchies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupHierarchyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupHierarchySlice")
	}

	*o = slice

	return nil
}

// GroupHierarchyExists checks if the GroupHierarchy row exists.
func GroupHierarchyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_hierarchies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_hierarchies exists")
	}

	return exists, nil
}

// Exists checks if the GroupHierarchy row exists.
func (o *GroupHierarchy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupHierarchyExists(ctx, exec, o.ID)
}
