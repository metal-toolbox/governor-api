// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationTarget is an object representing the database table.
type NotificationTarget struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug           string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Description    string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	DefaultEnabled bool      `boil:"default_enabled" json:"default_enabled" toml:"default_enabled" yaml:"default_enabled"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *notificationTargetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationTargetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationTargetColumns = struct {
	ID             string
	Name           string
	Slug           string
	Description    string
	DefaultEnabled string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	Name:           "name",
	Slug:           "slug",
	Description:    "description",
	DefaultEnabled: "default_enabled",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var NotificationTargetTableColumns = struct {
	ID             string
	Name           string
	Slug           string
	Description    string
	DefaultEnabled string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "notification_targets.id",
	Name:           "notification_targets.name",
	Slug:           "notification_targets.slug",
	Description:    "notification_targets.description",
	DefaultEnabled: "notification_targets.default_enabled",
	CreatedAt:      "notification_targets.created_at",
	UpdatedAt:      "notification_targets.updated_at",
	DeletedAt:      "notification_targets.deleted_at",
}

// Generated where

var NotificationTargetWhere = struct {
	ID             whereHelperstring
	Name           whereHelperstring
	Slug           whereHelperstring
	Description    whereHelperstring
	DefaultEnabled whereHelperbool
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"notification_targets\".\"id\""},
	Name:           whereHelperstring{field: "\"notification_targets\".\"name\""},
	Slug:           whereHelperstring{field: "\"notification_targets\".\"slug\""},
	Description:    whereHelperstring{field: "\"notification_targets\".\"description\""},
	DefaultEnabled: whereHelperbool{field: "\"notification_targets\".\"default_enabled\""},
	CreatedAt:      whereHelpertime_Time{field: "\"notification_targets\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"notification_targets\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"notification_targets\".\"deleted_at\""},
}

// NotificationTargetRels is where relationship names are stored.
var NotificationTargetRels = struct {
	NotificationPreferences string
}{
	NotificationPreferences: "NotificationPreferences",
}

// notificationTargetR is where relationships are stored.
type notificationTargetR struct {
	NotificationPreferences NotificationPreferenceSlice `boil:"NotificationPreferences" json:"NotificationPreferences" toml:"NotificationPreferences" yaml:"NotificationPreferences"`
}

// NewStruct creates a new relationship struct
func (*notificationTargetR) NewStruct() *notificationTargetR {
	return &notificationTargetR{}
}

func (r *notificationTargetR) GetNotificationPreferences() NotificationPreferenceSlice {
	if r == nil {
		return nil
	}
	return r.NotificationPreferences
}

// notificationTargetL is where Load methods for each relationship are stored.
type notificationTargetL struct{}

var (
	notificationTargetAllColumns            = []string{"id", "name", "slug", "description", "default_enabled", "created_at", "updated_at", "deleted_at"}
	notificationTargetColumnsWithoutDefault = []string{"name", "slug", "description", "default_enabled"}
	notificationTargetColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	notificationTargetPrimaryKeyColumns     = []string{"id"}
	notificationTargetGeneratedColumns      = []string{}
)

type (
	// NotificationTargetSlice is an alias for a slice of pointers to NotificationTarget.
	// This should almost always be used instead of []NotificationTarget.
	NotificationTargetSlice []*NotificationTarget
	// NotificationTargetHook is the signature for custom NotificationTarget hook methods
	NotificationTargetHook func(context.Context, boil.ContextExecutor, *NotificationTarget) error

	notificationTargetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationTargetType                 = reflect.TypeOf(&NotificationTarget{})
	notificationTargetMapping              = queries.MakeStructMapping(notificationTargetType)
	notificationTargetPrimaryKeyMapping, _ = queries.BindMapping(notificationTargetType, notificationTargetMapping, notificationTargetPrimaryKeyColumns)
	notificationTargetInsertCacheMut       sync.RWMutex
	notificationTargetInsertCache          = make(map[string]insertCache)
	notificationTargetUpdateCacheMut       sync.RWMutex
	notificationTargetUpdateCache          = make(map[string]updateCache)
	notificationTargetUpsertCacheMut       sync.RWMutex
	notificationTargetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationTargetAfterSelectHooks []NotificationTargetHook

var notificationTargetBeforeInsertHooks []NotificationTargetHook
var notificationTargetAfterInsertHooks []NotificationTargetHook

var notificationTargetBeforeUpdateHooks []NotificationTargetHook
var notificationTargetAfterUpdateHooks []NotificationTargetHook

var notificationTargetBeforeDeleteHooks []NotificationTargetHook
var notificationTargetAfterDeleteHooks []NotificationTargetHook

var notificationTargetBeforeUpsertHooks []NotificationTargetHook
var notificationTargetAfterUpsertHooks []NotificationTargetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationTarget) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationTarget) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationTarget) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationTarget) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationTarget) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationTarget) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationTarget) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationTarget) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationTarget) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationTargetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationTargetHook registers your hook function for all future operations.
func AddNotificationTargetHook(hookPoint boil.HookPoint, notificationTargetHook NotificationTargetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationTargetAfterSelectHooks = append(notificationTargetAfterSelectHooks, notificationTargetHook)
	case boil.BeforeInsertHook:
		notificationTargetBeforeInsertHooks = append(notificationTargetBeforeInsertHooks, notificationTargetHook)
	case boil.AfterInsertHook:
		notificationTargetAfterInsertHooks = append(notificationTargetAfterInsertHooks, notificationTargetHook)
	case boil.BeforeUpdateHook:
		notificationTargetBeforeUpdateHooks = append(notificationTargetBeforeUpdateHooks, notificationTargetHook)
	case boil.AfterUpdateHook:
		notificationTargetAfterUpdateHooks = append(notificationTargetAfterUpdateHooks, notificationTargetHook)
	case boil.BeforeDeleteHook:
		notificationTargetBeforeDeleteHooks = append(notificationTargetBeforeDeleteHooks, notificationTargetHook)
	case boil.AfterDeleteHook:
		notificationTargetAfterDeleteHooks = append(notificationTargetAfterDeleteHooks, notificationTargetHook)
	case boil.BeforeUpsertHook:
		notificationTargetBeforeUpsertHooks = append(notificationTargetBeforeUpsertHooks, notificationTargetHook)
	case boil.AfterUpsertHook:
		notificationTargetAfterUpsertHooks = append(notificationTargetAfterUpsertHooks, notificationTargetHook)
	}
}

// One returns a single notificationTarget record from the query.
func (q notificationTargetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationTarget, error) {
	o := &NotificationTarget{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification_targets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationTarget records from the query.
func (q notificationTargetQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationTargetSlice, error) {
	var o []*NotificationTarget

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotificationTarget slice")
	}

	if len(notificationTargetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationTarget records in the query.
func (q notificationTargetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification_targets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationTargetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification_targets exists")
	}

	return count > 0, nil
}

// NotificationPreferences retrieves all the notification_preference's NotificationPreferences with an executor.
func (o *NotificationTarget) NotificationPreferences(mods ...qm.QueryMod) notificationPreferenceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification_preferences\".\"notification_target_id\"=?", o.ID),
	)

	return NotificationPreferences(queryMods...)
}

// LoadNotificationPreferences allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (notificationTargetL) LoadNotificationPreferences(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationTarget interface{}, mods queries.Applicator) error {
	var slice []*NotificationTarget
	var object *NotificationTarget

	if singular {
		var ok bool
		object, ok = maybeNotificationTarget.(*NotificationTarget)
		if !ok {
			object = new(NotificationTarget)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationTarget)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationTarget))
			}
		}
	} else {
		s, ok := maybeNotificationTarget.(*[]*NotificationTarget)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationTarget)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationTarget))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationTargetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationTargetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notification_preferences`),
		qm.WhereIn(`notification_preferences.notification_target_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification_preferences")
	}

	var resultSlice []*NotificationPreference
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification_preferences")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification_preferences")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_preferences")
	}

	if len(notificationPreferenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NotificationPreferences = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationPreferenceR{}
			}
			foreign.R.NotificationTarget = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NotificationTargetID) {
				local.R.NotificationPreferences = append(local.R.NotificationPreferences, foreign)
				if foreign.R == nil {
					foreign.R = &notificationPreferenceR{}
				}
				foreign.R.NotificationTarget = local
				break
			}
		}
	}

	return nil
}

// AddNotificationPreferences adds the given related objects to the existing relationships
// of the notification_target, optionally inserting them as new records.
// Appends related to o.R.NotificationPreferences.
// Sets related.R.NotificationTarget appropriately.
func (o *NotificationTarget) AddNotificationPreferences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotificationPreference) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NotificationTargetID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification_preferences\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"notification_target_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPreferencePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NotificationTargetID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &notificationTargetR{
			NotificationPreferences: related,
		}
	} else {
		o.R.NotificationPreferences = append(o.R.NotificationPreferences, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationPreferenceR{
				NotificationTarget: o,
			}
		} else {
			rel.R.NotificationTarget = o
		}
	}
	return nil
}

// SetNotificationPreferences removes all previously related items of the
// notification_target replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NotificationTarget's NotificationPreferences accordingly.
// Replaces o.R.NotificationPreferences with related.
// Sets related.R.NotificationTarget's NotificationPreferences accordingly.
func (o *NotificationTarget) SetNotificationPreferences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NotificationPreference) error {
	query := "update \"notification_preferences\" set \"notification_target_id\" = null where \"notification_target_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NotificationPreferences {
			queries.SetScanner(&rel.NotificationTargetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NotificationTarget = nil
		}
		o.R.NotificationPreferences = nil
	}

	return o.AddNotificationPreferences(ctx, exec, insert, related...)
}

// RemoveNotificationPreferences relationships from objects passed in.
// Removes related items from R.NotificationPreferences (uses pointer comparison, removal does not keep order)
// Sets related.R.NotificationTarget.
func (o *NotificationTarget) RemoveNotificationPreferences(ctx context.Context, exec boil.ContextExecutor, related ...*NotificationPreference) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NotificationTargetID, nil)
		if rel.R != nil {
			rel.R.NotificationTarget = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("notification_target_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NotificationPreferences {
			if rel != ri {
				continue
			}

			ln := len(o.R.NotificationPreferences)
			if ln > 1 && i < ln-1 {
				o.R.NotificationPreferences[i] = o.R.NotificationPreferences[ln-1]
			}
			o.R.NotificationPreferences = o.R.NotificationPreferences[:ln-1]
			break
		}
	}

	return nil
}

// NotificationTargets retrieves all the records using an executor.
func NotificationTargets(mods ...qm.QueryMod) notificationTargetQuery {
	mods = append(mods, qm.From("\"notification_targets\""), qmhelper.WhereIsNull("\"notification_targets\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"notification_targets\".*"})
	}

	return notificationTargetQuery{q}
}

// FindNotificationTarget retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationTarget(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*NotificationTarget, error) {
	notificationTargetObj := &NotificationTarget{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification_targets\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, notificationTargetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification_targets")
	}

	if err = notificationTargetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationTargetObj, err
	}

	return notificationTargetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationTarget) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_targets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTargetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationTargetInsertCacheMut.RLock()
	cache, cached := notificationTargetInsertCache[key]
	notificationTargetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationTargetAllColumns,
			notificationTargetColumnsWithDefault,
			notificationTargetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationTargetType, notificationTargetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationTargetType, notificationTargetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification_targets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification_targets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification_targets")
	}

	if !cached {
		notificationTargetInsertCacheMut.Lock()
		notificationTargetInsertCache[key] = cache
		notificationTargetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationTarget.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationTarget) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationTargetUpdateCacheMut.RLock()
	cache, cached := notificationTargetUpdateCache[key]
	notificationTargetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationTargetAllColumns,
			notificationTargetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notification_targets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification_targets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationTargetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationTargetType, notificationTargetMapping, append(wl, notificationTargetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notification_targets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notification_targets")
	}

	if !cached {
		notificationTargetUpdateCacheMut.Lock()
		notificationTargetUpdateCache[key] = cache
		notificationTargetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationTargetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notification_targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notification_targets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationTargetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTargetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notification_targets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notificationTargetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notificationTarget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notificationTarget")
	}
	return rowsAff, nil
}

// Delete deletes a single NotificationTarget record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationTarget) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NotificationTarget provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationTargetPrimaryKeyMapping)
		sql = "DELETE FROM \"notification_targets\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"notification_targets\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(notificationTargetType, notificationTargetMapping, append(wl, notificationTargetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notification_targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notification_targets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationTargetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationTargetQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification_targets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_targets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationTargetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationTargetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTargetPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"notification_targets\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationTargetPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTargetPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"notification_targets\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, notificationTargetPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notificationTarget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_targets")
	}

	if len(notificationTargetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationTarget) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationTarget(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationTargetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationTargetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationTargetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notification_targets\".* FROM \"notification_targets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationTargetPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationTargetSlice")
	}

	*o = slice

	return nil
}

// NotificationTargetExists checks if the NotificationTarget row exists.
func NotificationTargetExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notification_targets\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification_targets exists")
	}

	return exists, nil
}

// Exists checks if the NotificationTarget row exists.
func (o *NotificationTarget) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationTargetExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationTarget) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_targets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationTargetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationTargetUpsertCacheMut.RLock()
	cache, cached := notificationTargetUpsertCache[key]
	notificationTargetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationTargetAllColumns,
			notificationTargetColumnsWithDefault,
			notificationTargetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationTargetAllColumns,
			notificationTargetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notification_targets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationTargetPrimaryKeyColumns))
			copy(conflict, notificationTargetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"notification_targets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notificationTargetType, notificationTargetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationTargetType, notificationTargetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notification_targets")
	}

	if !cached {
		notificationTargetUpsertCacheMut.Lock()
		notificationTargetUpsertCache[key] = cache
		notificationTargetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
