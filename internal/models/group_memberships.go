// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupMembership is an object representing the database table.
type GroupMembership struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID   string    `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IsAdmin   bool      `boil:"is_admin" json:"is_admin" toml:"is_admin" yaml:"is_admin"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ExpiresAt null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`

	R *groupMembershipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupMembershipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupMembershipColumns = struct {
	ID        string
	GroupID   string
	UserID    string
	IsAdmin   string
	CreatedAt string
	UpdatedAt string
	ExpiresAt string
}{
	ID:        "id",
	GroupID:   "group_id",
	UserID:    "user_id",
	IsAdmin:   "is_admin",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ExpiresAt: "expires_at",
}

var GroupMembershipTableColumns = struct {
	ID        string
	GroupID   string
	UserID    string
	IsAdmin   string
	CreatedAt string
	UpdatedAt string
	ExpiresAt string
}{
	ID:        "group_memberships.id",
	GroupID:   "group_memberships.group_id",
	UserID:    "group_memberships.user_id",
	IsAdmin:   "group_memberships.is_admin",
	CreatedAt: "group_memberships.created_at",
	UpdatedAt: "group_memberships.updated_at",
	ExpiresAt: "group_memberships.expires_at",
}

// Generated where

var GroupMembershipWhere = struct {
	ID        whereHelperstring
	GroupID   whereHelperstring
	UserID    whereHelperstring
	IsAdmin   whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ExpiresAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"group_memberships\".\"id\""},
	GroupID:   whereHelperstring{field: "\"group_memberships\".\"group_id\""},
	UserID:    whereHelperstring{field: "\"group_memberships\".\"user_id\""},
	IsAdmin:   whereHelperbool{field: "\"group_memberships\".\"is_admin\""},
	CreatedAt: whereHelpertime_Time{field: "\"group_memberships\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"group_memberships\".\"updated_at\""},
	ExpiresAt: whereHelpernull_Time{field: "\"group_memberships\".\"expires_at\""},
}

// GroupMembershipRels is where relationship names are stored.
var GroupMembershipRels = struct {
	User  string
	Group string
}{
	User:  "User",
	Group: "Group",
}

// groupMembershipR is where relationships are stored.
type groupMembershipR struct {
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
	Group *Group `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
}

// NewStruct creates a new relationship struct
func (*groupMembershipR) NewStruct() *groupMembershipR {
	return &groupMembershipR{}
}

func (r *groupMembershipR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *groupMembershipR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

// groupMembershipL is where Load methods for each relationship are stored.
type groupMembershipL struct{}

var (
	groupMembershipAllColumns            = []string{"id", "group_id", "user_id", "is_admin", "created_at", "updated_at", "expires_at"}
	groupMembershipColumnsWithoutDefault = []string{"group_id", "user_id", "created_at", "updated_at"}
	groupMembershipColumnsWithDefault    = []string{"id", "is_admin", "expires_at"}
	groupMembershipPrimaryKeyColumns     = []string{"id"}
	groupMembershipGeneratedColumns      = []string{}
)

type (
	// GroupMembershipSlice is an alias for a slice of pointers to GroupMembership.
	// This should almost always be used instead of []GroupMembership.
	GroupMembershipSlice []*GroupMembership
	// GroupMembershipHook is the signature for custom GroupMembership hook methods
	GroupMembershipHook func(context.Context, boil.ContextExecutor, *GroupMembership) error

	groupMembershipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupMembershipType                 = reflect.TypeOf(&GroupMembership{})
	groupMembershipMapping              = queries.MakeStructMapping(groupMembershipType)
	groupMembershipPrimaryKeyMapping, _ = queries.BindMapping(groupMembershipType, groupMembershipMapping, groupMembershipPrimaryKeyColumns)
	groupMembershipInsertCacheMut       sync.RWMutex
	groupMembershipInsertCache          = make(map[string]insertCache)
	groupMembershipUpdateCacheMut       sync.RWMutex
	groupMembershipUpdateCache          = make(map[string]updateCache)
	groupMembershipUpsertCacheMut       sync.RWMutex
	groupMembershipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupMembershipAfterSelectHooks []GroupMembershipHook

var groupMembershipBeforeInsertHooks []GroupMembershipHook
var groupMembershipAfterInsertHooks []GroupMembershipHook

var groupMembershipBeforeUpdateHooks []GroupMembershipHook
var groupMembershipAfterUpdateHooks []GroupMembershipHook

var groupMembershipBeforeDeleteHooks []GroupMembershipHook
var groupMembershipAfterDeleteHooks []GroupMembershipHook

var groupMembershipBeforeUpsertHooks []GroupMembershipHook
var groupMembershipAfterUpsertHooks []GroupMembershipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupMembership) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupMembership) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupMembership) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupMembership) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupMembership) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupMembership) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupMembership) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupMembership) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupMembership) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMembershipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupMembershipHook registers your hook function for all future operations.
func AddGroupMembershipHook(hookPoint boil.HookPoint, groupMembershipHook GroupMembershipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupMembershipAfterSelectHooks = append(groupMembershipAfterSelectHooks, groupMembershipHook)
	case boil.BeforeInsertHook:
		groupMembershipBeforeInsertHooks = append(groupMembershipBeforeInsertHooks, groupMembershipHook)
	case boil.AfterInsertHook:
		groupMembershipAfterInsertHooks = append(groupMembershipAfterInsertHooks, groupMembershipHook)
	case boil.BeforeUpdateHook:
		groupMembershipBeforeUpdateHooks = append(groupMembershipBeforeUpdateHooks, groupMembershipHook)
	case boil.AfterUpdateHook:
		groupMembershipAfterUpdateHooks = append(groupMembershipAfterUpdateHooks, groupMembershipHook)
	case boil.BeforeDeleteHook:
		groupMembershipBeforeDeleteHooks = append(groupMembershipBeforeDeleteHooks, groupMembershipHook)
	case boil.AfterDeleteHook:
		groupMembershipAfterDeleteHooks = append(groupMembershipAfterDeleteHooks, groupMembershipHook)
	case boil.BeforeUpsertHook:
		groupMembershipBeforeUpsertHooks = append(groupMembershipBeforeUpsertHooks, groupMembershipHook)
	case boil.AfterUpsertHook:
		groupMembershipAfterUpsertHooks = append(groupMembershipAfterUpsertHooks, groupMembershipHook)
	}
}

// One returns a single groupMembership record from the query.
func (q groupMembershipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupMembership, error) {
	o := &GroupMembership{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_memberships")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupMembership records from the query.
func (q groupMembershipQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupMembershipSlice, error) {
	var o []*GroupMembership

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupMembership slice")
	}

	if len(groupMembershipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupMembership records in the query.
func (q groupMembershipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_memberships rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupMembershipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_memberships exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *GroupMembership) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Group pointed to by the foreign key.
func (o *GroupMembership) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMembershipL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMembership interface{}, mods queries.Applicator) error {
	var slice []*GroupMembership
	var object *GroupMembership

	if singular {
		var ok bool
		object, ok = maybeGroupMembership.(*GroupMembership)
		if !ok {
			object = new(GroupMembership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMembership))
			}
		}
	} else {
		s, ok := maybeGroupMembership.(*[]*GroupMembership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupMembershipR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMembershipR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GroupMemberships = append(foreign.R.GroupMemberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GroupMemberships = append(foreign.R.GroupMemberships, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMembershipL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMembership interface{}, mods queries.Applicator) error {
	var slice []*GroupMembership
	var object *GroupMembership

	if singular {
		var ok bool
		object, ok = maybeGroupMembership.(*GroupMembership)
		if !ok {
			object = new(GroupMembership)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMembership))
			}
		}
	} else {
		s, ok := maybeGroupMembership.(*[]*GroupMembership)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMembership)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMembership))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupMembershipR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMembershipR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupMemberships = append(foreign.R.GroupMemberships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupMemberships = append(foreign.R.GroupMemberships, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the groupMembership to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMemberships.
func (o *GroupMembership) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupMembershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &groupMembershipR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GroupMemberships: GroupMembershipSlice{o},
		}
	} else {
		related.R.GroupMemberships = append(related.R.GroupMemberships, o)
	}

	return nil
}

// SetGroup of the groupMembership to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMemberships.
func (o *GroupMembership) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupMembershipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupMembershipR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupMemberships: GroupMembershipSlice{o},
		}
	} else {
		related.R.GroupMemberships = append(related.R.GroupMemberships, o)
	}

	return nil
}

// GroupMemberships retrieves all the records using an executor.
func GroupMemberships(mods ...qm.QueryMod) groupMembershipQuery {
	mods = append(mods, qm.From("\"group_memberships\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"group_memberships\".*"})
	}

	return groupMembershipQuery{q}
}

// FindGroupMembership retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupMembership(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GroupMembership, error) {
	groupMembershipObj := &GroupMembership{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_memberships\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupMembershipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_memberships")
	}

	if err = groupMembershipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupMembershipObj, err
	}

	return groupMembershipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupMembership) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_memberships provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMembershipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupMembershipInsertCacheMut.RLock()
	cache, cached := groupMembershipInsertCache[key]
	groupMembershipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupMembershipAllColumns,
			groupMembershipColumnsWithDefault,
			groupMembershipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupMembershipType, groupMembershipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupMembershipType, groupMembershipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_memberships\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_memberships\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_memberships")
	}

	if !cached {
		groupMembershipInsertCacheMut.Lock()
		groupMembershipInsertCache[key] = cache
		groupMembershipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupMembership.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupMembership) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupMembershipUpdateCacheMut.RLock()
	cache, cached := groupMembershipUpdateCache[key]
	groupMembershipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupMembershipAllColumns,
			groupMembershipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_memberships, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_memberships\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupMembershipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupMembershipType, groupMembershipMapping, append(wl, groupMembershipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_memberships row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_memberships")
	}

	if !cached {
		groupMembershipUpdateCacheMut.Lock()
		groupMembershipUpdateCache[key] = cache
		groupMembershipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupMembershipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_memberships")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupMembershipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_memberships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupMembershipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupMembership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupMembership")
	}
	return rowsAff, nil
}

// Delete deletes a single GroupMembership record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupMembership) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupMembership provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupMembershipPrimaryKeyMapping)
	sql := "DELETE FROM \"group_memberships\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_memberships")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupMembershipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupMembershipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_memberships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_memberships")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupMembershipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupMembershipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_memberships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupMembershipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupMembership slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_memberships")
	}

	if len(groupMembershipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupMembership) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupMembership(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupMembershipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupMembershipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMembershipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_memberships\".* FROM \"group_memberships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupMembershipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupMembershipSlice")
	}

	*o = slice

	return nil
}

// GroupMembershipExists checks if the GroupMembership row exists.
func GroupMembershipExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_memberships\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_memberships exists")
	}

	return exists, nil
}

// Exists checks if the GroupMembership row exists.
func (o *GroupMembership) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupMembershipExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupMembership) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_memberships provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMembershipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupMembershipUpsertCacheMut.RLock()
	cache, cached := groupMembershipUpsertCache[key]
	groupMembershipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupMembershipAllColumns,
			groupMembershipColumnsWithDefault,
			groupMembershipColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupMembershipAllColumns,
			groupMembershipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_memberships, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupMembershipPrimaryKeyColumns))
			copy(conflict, groupMembershipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"group_memberships\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupMembershipType, groupMembershipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupMembershipType, groupMembershipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_memberships")
	}

	if !cached {
		groupMembershipUpsertCacheMut.Lock()
		groupMembershipUpsertCache[key] = cache
		groupMembershipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
