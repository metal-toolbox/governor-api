// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NotificationPreference is an object representing the database table.
type NotificationPreference struct {
	ID                             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID                         string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	NotificationTypeID             string      `boil:"notification_type_id" json:"notification_type_id" toml:"notification_type_id" yaml:"notification_type_id"`
	NotificationTargetID           null.String `boil:"notification_target_id" json:"notification_target_id,omitempty" toml:"notification_target_id" yaml:"notification_target_id,omitempty"`
	NotificationTargetIDNullString null.String `boil:"notification_target_id_null_string" json:"notification_target_id_null_string,omitempty" toml:"notification_target_id_null_string" yaml:"notification_target_id_null_string,omitempty"`
	Enabled                        bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`

	R *notificationPreferenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationPreferenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationPreferenceColumns = struct {
	ID                             string
	UserID                         string
	NotificationTypeID             string
	NotificationTargetID           string
	NotificationTargetIDNullString string
	Enabled                        string
}{
	ID:                             "id",
	UserID:                         "user_id",
	NotificationTypeID:             "notification_type_id",
	NotificationTargetID:           "notification_target_id",
	NotificationTargetIDNullString: "notification_target_id_null_string",
	Enabled:                        "enabled",
}

var NotificationPreferenceTableColumns = struct {
	ID                             string
	UserID                         string
	NotificationTypeID             string
	NotificationTargetID           string
	NotificationTargetIDNullString string
	Enabled                        string
}{
	ID:                             "notification_preferences.id",
	UserID:                         "notification_preferences.user_id",
	NotificationTypeID:             "notification_preferences.notification_type_id",
	NotificationTargetID:           "notification_preferences.notification_target_id",
	NotificationTargetIDNullString: "notification_preferences.notification_target_id_null_string",
	Enabled:                        "notification_preferences.enabled",
}

// Generated where

var NotificationPreferenceWhere = struct {
	ID                             whereHelperstring
	UserID                         whereHelperstring
	NotificationTypeID             whereHelperstring
	NotificationTargetID           whereHelpernull_String
	NotificationTargetIDNullString whereHelpernull_String
	Enabled                        whereHelperbool
}{
	ID:                             whereHelperstring{field: "\"notification_preferences\".\"id\""},
	UserID:                         whereHelperstring{field: "\"notification_preferences\".\"user_id\""},
	NotificationTypeID:             whereHelperstring{field: "\"notification_preferences\".\"notification_type_id\""},
	NotificationTargetID:           whereHelpernull_String{field: "\"notification_preferences\".\"notification_target_id\""},
	NotificationTargetIDNullString: whereHelpernull_String{field: "\"notification_preferences\".\"notification_target_id_null_string\""},
	Enabled:                        whereHelperbool{field: "\"notification_preferences\".\"enabled\""},
}

// NotificationPreferenceRels is where relationship names are stored.
var NotificationPreferenceRels = struct {
	User               string
	NotificationType   string
	NotificationTarget string
}{
	User:               "User",
	NotificationType:   "NotificationType",
	NotificationTarget: "NotificationTarget",
}

// notificationPreferenceR is where relationships are stored.
type notificationPreferenceR struct {
	User               *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
	NotificationType   *NotificationType   `boil:"NotificationType" json:"NotificationType" toml:"NotificationType" yaml:"NotificationType"`
	NotificationTarget *NotificationTarget `boil:"NotificationTarget" json:"NotificationTarget" toml:"NotificationTarget" yaml:"NotificationTarget"`
}

// NewStruct creates a new relationship struct
func (*notificationPreferenceR) NewStruct() *notificationPreferenceR {
	return &notificationPreferenceR{}
}

func (r *notificationPreferenceR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *notificationPreferenceR) GetNotificationType() *NotificationType {
	if r == nil {
		return nil
	}
	return r.NotificationType
}

func (r *notificationPreferenceR) GetNotificationTarget() *NotificationTarget {
	if r == nil {
		return nil
	}
	return r.NotificationTarget
}

// notificationPreferenceL is where Load methods for each relationship are stored.
type notificationPreferenceL struct{}

var (
	notificationPreferenceAllColumns            = []string{"id", "user_id", "notification_type_id", "notification_target_id", "notification_target_id_null_string", "enabled"}
	notificationPreferenceColumnsWithoutDefault = []string{"user_id", "notification_type_id"}
	notificationPreferenceColumnsWithDefault    = []string{"id", "notification_target_id", "notification_target_id_null_string", "enabled"}
	notificationPreferencePrimaryKeyColumns     = []string{"id"}
	notificationPreferenceGeneratedColumns      = []string{}
)

type (
	// NotificationPreferenceSlice is an alias for a slice of pointers to NotificationPreference.
	// This should almost always be used instead of []NotificationPreference.
	NotificationPreferenceSlice []*NotificationPreference
	// NotificationPreferenceHook is the signature for custom NotificationPreference hook methods
	NotificationPreferenceHook func(context.Context, boil.ContextExecutor, *NotificationPreference) error

	notificationPreferenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationPreferenceType                 = reflect.TypeOf(&NotificationPreference{})
	notificationPreferenceMapping              = queries.MakeStructMapping(notificationPreferenceType)
	notificationPreferencePrimaryKeyMapping, _ = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, notificationPreferencePrimaryKeyColumns)
	notificationPreferenceInsertCacheMut       sync.RWMutex
	notificationPreferenceInsertCache          = make(map[string]insertCache)
	notificationPreferenceUpdateCacheMut       sync.RWMutex
	notificationPreferenceUpdateCache          = make(map[string]updateCache)
	notificationPreferenceUpsertCacheMut       sync.RWMutex
	notificationPreferenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var notificationPreferenceAfterSelectHooks []NotificationPreferenceHook

var notificationPreferenceBeforeInsertHooks []NotificationPreferenceHook
var notificationPreferenceAfterInsertHooks []NotificationPreferenceHook

var notificationPreferenceBeforeUpdateHooks []NotificationPreferenceHook
var notificationPreferenceAfterUpdateHooks []NotificationPreferenceHook

var notificationPreferenceBeforeDeleteHooks []NotificationPreferenceHook
var notificationPreferenceAfterDeleteHooks []NotificationPreferenceHook

var notificationPreferenceBeforeUpsertHooks []NotificationPreferenceHook
var notificationPreferenceAfterUpsertHooks []NotificationPreferenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationPreference) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationPreference) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationPreference) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationPreference) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationPreference) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationPreference) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationPreference) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationPreference) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationPreference) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range notificationPreferenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationPreferenceHook registers your hook function for all future operations.
func AddNotificationPreferenceHook(hookPoint boil.HookPoint, notificationPreferenceHook NotificationPreferenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		notificationPreferenceAfterSelectHooks = append(notificationPreferenceAfterSelectHooks, notificationPreferenceHook)
	case boil.BeforeInsertHook:
		notificationPreferenceBeforeInsertHooks = append(notificationPreferenceBeforeInsertHooks, notificationPreferenceHook)
	case boil.AfterInsertHook:
		notificationPreferenceAfterInsertHooks = append(notificationPreferenceAfterInsertHooks, notificationPreferenceHook)
	case boil.BeforeUpdateHook:
		notificationPreferenceBeforeUpdateHooks = append(notificationPreferenceBeforeUpdateHooks, notificationPreferenceHook)
	case boil.AfterUpdateHook:
		notificationPreferenceAfterUpdateHooks = append(notificationPreferenceAfterUpdateHooks, notificationPreferenceHook)
	case boil.BeforeDeleteHook:
		notificationPreferenceBeforeDeleteHooks = append(notificationPreferenceBeforeDeleteHooks, notificationPreferenceHook)
	case boil.AfterDeleteHook:
		notificationPreferenceAfterDeleteHooks = append(notificationPreferenceAfterDeleteHooks, notificationPreferenceHook)
	case boil.BeforeUpsertHook:
		notificationPreferenceBeforeUpsertHooks = append(notificationPreferenceBeforeUpsertHooks, notificationPreferenceHook)
	case boil.AfterUpsertHook:
		notificationPreferenceAfterUpsertHooks = append(notificationPreferenceAfterUpsertHooks, notificationPreferenceHook)
	}
}

// One returns a single notificationPreference record from the query.
func (q notificationPreferenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NotificationPreference, error) {
	o := &NotificationPreference{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification_preferences")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NotificationPreference records from the query.
func (q notificationPreferenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (NotificationPreferenceSlice, error) {
	var o []*NotificationPreference

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotificationPreference slice")
	}

	if len(notificationPreferenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NotificationPreference records in the query.
func (q notificationPreferenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification_preferences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q notificationPreferenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification_preferences exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *NotificationPreference) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// NotificationType pointed to by the foreign key.
func (o *NotificationPreference) NotificationType(mods ...qm.QueryMod) notificationTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NotificationTypeID),
	}

	queryMods = append(queryMods, mods...)

	return NotificationTypes(queryMods...)
}

// NotificationTarget pointed to by the foreign key.
func (o *NotificationPreference) NotificationTarget(mods ...qm.QueryMod) notificationTargetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NotificationTargetID),
	}

	queryMods = append(queryMods, mods...)

	return NotificationTargets(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationPreferenceL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationPreference interface{}, mods queries.Applicator) error {
	var slice []*NotificationPreference
	var object *NotificationPreference

	if singular {
		var ok bool
		object, ok = maybeNotificationPreference.(*NotificationPreference)
		if !ok {
			object = new(NotificationPreference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationPreference))
			}
		}
	} else {
		s, ok := maybeNotificationPreference.(*[]*NotificationPreference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationPreference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationPreferenceR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationPreferenceR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, local)
				break
			}
		}
	}

	return nil
}

// LoadNotificationType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationPreferenceL) LoadNotificationType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationPreference interface{}, mods queries.Applicator) error {
	var slice []*NotificationPreference
	var object *NotificationPreference

	if singular {
		var ok bool
		object, ok = maybeNotificationPreference.(*NotificationPreference)
		if !ok {
			object = new(NotificationPreference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationPreference))
			}
		}
	} else {
		s, ok := maybeNotificationPreference.(*[]*NotificationPreference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationPreference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationPreferenceR{}
		}
		args = append(args, object.NotificationTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationPreferenceR{}
			}

			for _, a := range args {
				if a == obj.NotificationTypeID {
					continue Outer
				}
			}

			args = append(args, obj.NotificationTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notification_types`),
		qm.WhereIn(`notification_types.id in ?`, args...),
		qmhelper.WhereIsNull(`notification_types.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NotificationType")
	}

	var resultSlice []*NotificationType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NotificationType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notification_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_types")
	}

	if len(notificationTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NotificationType = foreign
		if foreign.R == nil {
			foreign.R = &notificationTypeR{}
		}
		foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NotificationTypeID == foreign.ID {
				local.R.NotificationType = foreign
				if foreign.R == nil {
					foreign.R = &notificationTypeR{}
				}
				foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, local)
				break
			}
		}
	}

	return nil
}

// LoadNotificationTarget allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationPreferenceL) LoadNotificationTarget(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotificationPreference interface{}, mods queries.Applicator) error {
	var slice []*NotificationPreference
	var object *NotificationPreference

	if singular {
		var ok bool
		object, ok = maybeNotificationPreference.(*NotificationPreference)
		if !ok {
			object = new(NotificationPreference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotificationPreference))
			}
		}
	} else {
		s, ok := maybeNotificationPreference.(*[]*NotificationPreference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotificationPreference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotificationPreference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationPreferenceR{}
		}
		if !queries.IsNil(object.NotificationTargetID) {
			args = append(args, object.NotificationTargetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationPreferenceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NotificationTargetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NotificationTargetID) {
				args = append(args, obj.NotificationTargetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notification_targets`),
		qm.WhereIn(`notification_targets.id in ?`, args...),
		qmhelper.WhereIsNull(`notification_targets.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NotificationTarget")
	}

	var resultSlice []*NotificationTarget
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NotificationTarget")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notification_targets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_targets")
	}

	if len(notificationTargetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NotificationTarget = foreign
		if foreign.R == nil {
			foreign.R = &notificationTargetR{}
		}
		foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NotificationTargetID, foreign.ID) {
				local.R.NotificationTarget = foreign
				if foreign.R == nil {
					foreign.R = &notificationTargetR{}
				}
				foreign.R.NotificationPreferences = append(foreign.R.NotificationPreferences, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the notificationPreference to the related item.
// Sets o.R.User to related.
// Adds o to related.R.NotificationPreferences.
func (o *NotificationPreference) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPreferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &notificationPreferenceR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			NotificationPreferences: NotificationPreferenceSlice{o},
		}
	} else {
		related.R.NotificationPreferences = append(related.R.NotificationPreferences, o)
	}

	return nil
}

// SetNotificationType of the notificationPreference to the related item.
// Sets o.R.NotificationType to related.
// Adds o to related.R.NotificationPreferences.
func (o *NotificationPreference) SetNotificationType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NotificationType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notification_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPreferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NotificationTypeID = related.ID
	if o.R == nil {
		o.R = &notificationPreferenceR{
			NotificationType: related,
		}
	} else {
		o.R.NotificationType = related
	}

	if related.R == nil {
		related.R = &notificationTypeR{
			NotificationPreferences: NotificationPreferenceSlice{o},
		}
	} else {
		related.R.NotificationPreferences = append(related.R.NotificationPreferences, o)
	}

	return nil
}

// SetNotificationTarget of the notificationPreference to the related item.
// Sets o.R.NotificationTarget to related.
// Adds o to related.R.NotificationPreferences.
func (o *NotificationPreference) SetNotificationTarget(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NotificationTarget) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notification_target_id"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPreferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NotificationTargetID, related.ID)
	if o.R == nil {
		o.R = &notificationPreferenceR{
			NotificationTarget: related,
		}
	} else {
		o.R.NotificationTarget = related
	}

	if related.R == nil {
		related.R = &notificationTargetR{
			NotificationPreferences: NotificationPreferenceSlice{o},
		}
	} else {
		related.R.NotificationPreferences = append(related.R.NotificationPreferences, o)
	}

	return nil
}

// RemoveNotificationTarget relationship.
// Sets o.R.NotificationTarget to nil.
// Removes o from all passed in related items' relationships struct.
func (o *NotificationPreference) RemoveNotificationTarget(ctx context.Context, exec boil.ContextExecutor, related *NotificationTarget) error {
	var err error

	queries.SetScanner(&o.NotificationTargetID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("notification_target_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NotificationTarget = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NotificationPreferences {
		if queries.Equal(o.NotificationTargetID, ri.NotificationTargetID) {
			continue
		}

		ln := len(related.R.NotificationPreferences)
		if ln > 1 && i < ln-1 {
			related.R.NotificationPreferences[i] = related.R.NotificationPreferences[ln-1]
		}
		related.R.NotificationPreferences = related.R.NotificationPreferences[:ln-1]
		break
	}
	return nil
}

// NotificationPreferences retrieves all the records using an executor.
func NotificationPreferences(mods ...qm.QueryMod) notificationPreferenceQuery {
	mods = append(mods, qm.From("\"notification_preferences\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"notification_preferences\".*"})
	}

	return notificationPreferenceQuery{q}
}

// FindNotificationPreference retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationPreference(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*NotificationPreference, error) {
	notificationPreferenceObj := &NotificationPreference{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification_preferences\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, notificationPreferenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification_preferences")
	}

	if err = notificationPreferenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return notificationPreferenceObj, err
	}

	return notificationPreferenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NotificationPreference) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_preferences provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationPreferenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationPreferenceInsertCacheMut.RLock()
	cache, cached := notificationPreferenceInsertCache[key]
	notificationPreferenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationPreferenceAllColumns,
			notificationPreferenceColumnsWithDefault,
			notificationPreferenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification_preferences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification_preferences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification_preferences")
	}

	if !cached {
		notificationPreferenceInsertCacheMut.Lock()
		notificationPreferenceInsertCache[key] = cache
		notificationPreferenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NotificationPreference.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NotificationPreference) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationPreferenceUpdateCacheMut.RLock()
	cache, cached := notificationPreferenceUpdateCache[key]
	notificationPreferenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationPreferenceAllColumns,
			notificationPreferencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notification_preferences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification_preferences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationPreferencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, append(wl, notificationPreferencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notification_preferences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notification_preferences")
	}

	if !cached {
		notificationPreferenceUpdateCacheMut.Lock()
		notificationPreferenceUpdateCache[key] = cache
		notificationPreferenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationPreferenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notification_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notification_preferences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationPreferenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notification_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notificationPreferencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notificationPreference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notificationPreference")
	}
	return rowsAff, nil
}

// Delete deletes a single NotificationPreference record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationPreference) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NotificationPreference provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationPreferencePrimaryKeyMapping)
	sql := "DELETE FROM \"notification_preferences\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notification_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notification_preferences")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationPreferenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationPreferenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_preferences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationPreferenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationPreferenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notification_preferences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationPreferencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notificationPreference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification_preferences")
	}

	if len(notificationPreferenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationPreference) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotificationPreference(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationPreferenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationPreferenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notification_preferences\".* FROM \"notification_preferences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationPreferencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationPreferenceSlice")
	}

	*o = slice

	return nil
}

// NotificationPreferenceExists checks if the NotificationPreference row exists.
func NotificationPreferenceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notification_preferences\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification_preferences exists")
	}

	return exists, nil
}

// Exists checks if the NotificationPreference row exists.
func (o *NotificationPreference) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NotificationPreferenceExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NotificationPreference) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification_preferences provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationPreferenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationPreferenceUpsertCacheMut.RLock()
	cache, cached := notificationPreferenceUpsertCache[key]
	notificationPreferenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationPreferenceAllColumns,
			notificationPreferenceColumnsWithDefault,
			notificationPreferenceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationPreferenceAllColumns,
			notificationPreferencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notification_preferences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationPreferencePrimaryKeyColumns))
			copy(conflict, notificationPreferencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"notification_preferences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationPreferenceType, notificationPreferenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notification_preferences")
	}

	if !cached {
		notificationPreferenceUpsertCacheMut.Lock()
		notificationPreferenceUpsertCache[key] = cache
		notificationPreferenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
