// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupOrganization is an object representing the database table.
type GroupOrganization struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID        string    `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	OrganizationID string    `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *groupOrganizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupOrganizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupOrganizationColumns = struct {
	ID             string
	GroupID        string
	OrganizationID string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	GroupID:        "group_id",
	OrganizationID: "organization_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var GroupOrganizationTableColumns = struct {
	ID             string
	GroupID        string
	OrganizationID string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "group_organizations.id",
	GroupID:        "group_organizations.group_id",
	OrganizationID: "group_organizations.organization_id",
	CreatedAt:      "group_organizations.created_at",
	UpdatedAt:      "group_organizations.updated_at",
}

// Generated where

var GroupOrganizationWhere = struct {
	ID             whereHelperstring
	GroupID        whereHelperstring
	OrganizationID whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"group_organizations\".\"id\""},
	GroupID:        whereHelperstring{field: "\"group_organizations\".\"group_id\""},
	OrganizationID: whereHelperstring{field: "\"group_organizations\".\"organization_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"group_organizations\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"group_organizations\".\"updated_at\""},
}

// GroupOrganizationRels is where relationship names are stored.
var GroupOrganizationRels = struct {
	Organization string
	Group        string
}{
	Organization: "Organization",
	Group:        "Group",
}

// groupOrganizationR is where relationships are stored.
type groupOrganizationR struct {
	Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Group        *Group        `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
}

// NewStruct creates a new relationship struct
func (*groupOrganizationR) NewStruct() *groupOrganizationR {
	return &groupOrganizationR{}
}

func (r *groupOrganizationR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *groupOrganizationR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

// groupOrganizationL is where Load methods for each relationship are stored.
type groupOrganizationL struct{}

var (
	groupOrganizationAllColumns            = []string{"id", "group_id", "organization_id", "created_at", "updated_at"}
	groupOrganizationColumnsWithoutDefault = []string{"group_id", "organization_id"}
	groupOrganizationColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	groupOrganizationPrimaryKeyColumns     = []string{"id"}
	groupOrganizationGeneratedColumns      = []string{}
)

type (
	// GroupOrganizationSlice is an alias for a slice of pointers to GroupOrganization.
	// This should almost always be used instead of []GroupOrganization.
	GroupOrganizationSlice []*GroupOrganization
	// GroupOrganizationHook is the signature for custom GroupOrganization hook methods
	GroupOrganizationHook func(context.Context, boil.ContextExecutor, *GroupOrganization) error

	groupOrganizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupOrganizationType                 = reflect.TypeOf(&GroupOrganization{})
	groupOrganizationMapping              = queries.MakeStructMapping(groupOrganizationType)
	groupOrganizationPrimaryKeyMapping, _ = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, groupOrganizationPrimaryKeyColumns)
	groupOrganizationInsertCacheMut       sync.RWMutex
	groupOrganizationInsertCache          = make(map[string]insertCache)
	groupOrganizationUpdateCacheMut       sync.RWMutex
	groupOrganizationUpdateCache          = make(map[string]updateCache)
	groupOrganizationUpsertCacheMut       sync.RWMutex
	groupOrganizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupOrganizationAfterSelectHooks []GroupOrganizationHook

var groupOrganizationBeforeInsertHooks []GroupOrganizationHook
var groupOrganizationAfterInsertHooks []GroupOrganizationHook

var groupOrganizationBeforeUpdateHooks []GroupOrganizationHook
var groupOrganizationAfterUpdateHooks []GroupOrganizationHook

var groupOrganizationBeforeDeleteHooks []GroupOrganizationHook
var groupOrganizationAfterDeleteHooks []GroupOrganizationHook

var groupOrganizationBeforeUpsertHooks []GroupOrganizationHook
var groupOrganizationAfterUpsertHooks []GroupOrganizationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupOrganization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupOrganization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupOrganization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupOrganization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupOrganization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupOrganization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupOrganization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupOrganization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupOrganization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupOrganizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupOrganizationHook registers your hook function for all future operations.
func AddGroupOrganizationHook(hookPoint boil.HookPoint, groupOrganizationHook GroupOrganizationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupOrganizationAfterSelectHooks = append(groupOrganizationAfterSelectHooks, groupOrganizationHook)
	case boil.BeforeInsertHook:
		groupOrganizationBeforeInsertHooks = append(groupOrganizationBeforeInsertHooks, groupOrganizationHook)
	case boil.AfterInsertHook:
		groupOrganizationAfterInsertHooks = append(groupOrganizationAfterInsertHooks, groupOrganizationHook)
	case boil.BeforeUpdateHook:
		groupOrganizationBeforeUpdateHooks = append(groupOrganizationBeforeUpdateHooks, groupOrganizationHook)
	case boil.AfterUpdateHook:
		groupOrganizationAfterUpdateHooks = append(groupOrganizationAfterUpdateHooks, groupOrganizationHook)
	case boil.BeforeDeleteHook:
		groupOrganizationBeforeDeleteHooks = append(groupOrganizationBeforeDeleteHooks, groupOrganizationHook)
	case boil.AfterDeleteHook:
		groupOrganizationAfterDeleteHooks = append(groupOrganizationAfterDeleteHooks, groupOrganizationHook)
	case boil.BeforeUpsertHook:
		groupOrganizationBeforeUpsertHooks = append(groupOrganizationBeforeUpsertHooks, groupOrganizationHook)
	case boil.AfterUpsertHook:
		groupOrganizationAfterUpsertHooks = append(groupOrganizationAfterUpsertHooks, groupOrganizationHook)
	}
}

// One returns a single groupOrganization record from the query.
func (q groupOrganizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupOrganization, error) {
	o := &GroupOrganization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_organizations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupOrganization records from the query.
func (q groupOrganizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupOrganizationSlice, error) {
	var o []*GroupOrganization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupOrganization slice")
	}

	if len(groupOrganizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupOrganization records in the query.
func (q groupOrganizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_organizations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupOrganizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_organizations exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *GroupOrganization) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// Group pointed to by the foreign key.
func (o *GroupOrganization) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupOrganizationL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupOrganization interface{}, mods queries.Applicator) error {
	var slice []*GroupOrganization
	var object *GroupOrganization

	if singular {
		var ok bool
		object, ok = maybeGroupOrganization.(*GroupOrganization)
		if !ok {
			object = new(GroupOrganization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupOrganization))
			}
		}
	} else {
		s, ok := maybeGroupOrganization.(*[]*GroupOrganization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupOrganizationR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupOrganizationR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
		qmhelper.WhereIsNull(`organizations.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.GroupOrganizations = append(foreign.R.GroupOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.GroupOrganizations = append(foreign.R.GroupOrganizations, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupOrganizationL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupOrganization interface{}, mods queries.Applicator) error {
	var slice []*GroupOrganization
	var object *GroupOrganization

	if singular {
		var ok bool
		object, ok = maybeGroupOrganization.(*GroupOrganization)
		if !ok {
			object = new(GroupOrganization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupOrganization))
			}
		}
	} else {
		s, ok := maybeGroupOrganization.(*[]*GroupOrganization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupOrganization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupOrganization))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupOrganizationR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupOrganizationR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupOrganizations = append(foreign.R.GroupOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupOrganizations = append(foreign.R.GroupOrganizations, local)
				break
			}
		}
	}

	return nil
}

// SetOrganization of the groupOrganization to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.GroupOrganizations.
func (o *GroupOrganization) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupOrganizationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &groupOrganizationR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			GroupOrganizations: GroupOrganizationSlice{o},
		}
	} else {
		related.R.GroupOrganizations = append(related.R.GroupOrganizations, o)
	}

	return nil
}

// SetGroup of the groupOrganization to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupOrganizations.
func (o *GroupOrganization) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"group_organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupOrganizationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupOrganizationR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupOrganizations: GroupOrganizationSlice{o},
		}
	} else {
		related.R.GroupOrganizations = append(related.R.GroupOrganizations, o)
	}

	return nil
}

// GroupOrganizations retrieves all the records using an executor.
func GroupOrganizations(mods ...qm.QueryMod) groupOrganizationQuery {
	mods = append(mods, qm.From("\"group_organizations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"group_organizations\".*"})
	}

	return groupOrganizationQuery{q}
}

// FindGroupOrganization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupOrganization(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GroupOrganization, error) {
	groupOrganizationObj := &GroupOrganization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_organizations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupOrganizationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_organizations")
	}

	if err = groupOrganizationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupOrganizationObj, err
	}

	return groupOrganizationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupOrganization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_organizations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupOrganizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupOrganizationInsertCacheMut.RLock()
	cache, cached := groupOrganizationInsertCache[key]
	groupOrganizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupOrganizationAllColumns,
			groupOrganizationColumnsWithDefault,
			groupOrganizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_organizations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_organizations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_organizations")
	}

	if !cached {
		groupOrganizationInsertCacheMut.Lock()
		groupOrganizationInsertCache[key] = cache
		groupOrganizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupOrganization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupOrganization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupOrganizationUpdateCacheMut.RLock()
	cache, cached := groupOrganizationUpdateCache[key]
	groupOrganizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupOrganizationAllColumns,
			groupOrganizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_organizations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_organizations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupOrganizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, append(wl, groupOrganizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_organizations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_organizations")
	}

	if !cached {
		groupOrganizationUpdateCacheMut.Lock()
		groupOrganizationUpdateCache[key] = cache
		groupOrganizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupOrganizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_organizations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupOrganizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupOrganizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupOrganizationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupOrganization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupOrganization")
	}
	return rowsAff, nil
}

// Delete deletes a single GroupOrganization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupOrganization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupOrganization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupOrganizationPrimaryKeyMapping)
	sql := "DELETE FROM \"group_organizations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_organizations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupOrganizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupOrganizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_organizations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupOrganizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupOrganizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupOrganizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupOrganizationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupOrganization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_organizations")
	}

	if len(groupOrganizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupOrganization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupOrganization(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupOrganizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupOrganizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupOrganizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_organizations\".* FROM \"group_organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupOrganizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupOrganizationSlice")
	}

	*o = slice

	return nil
}

// GroupOrganizationExists checks if the GroupOrganization row exists.
func GroupOrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_organizations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_organizations exists")
	}

	return exists, nil
}

// Exists checks if the GroupOrganization row exists.
func (o *GroupOrganization) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupOrganizationExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupOrganization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_organizations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupOrganizationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupOrganizationUpsertCacheMut.RLock()
	cache, cached := groupOrganizationUpsertCache[key]
	groupOrganizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupOrganizationAllColumns,
			groupOrganizationColumnsWithDefault,
			groupOrganizationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupOrganizationAllColumns,
			groupOrganizationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_organizations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupOrganizationPrimaryKeyColumns))
			copy(conflict, groupOrganizationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"group_organizations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupOrganizationType, groupOrganizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_organizations")
	}

	if !cached {
		groupOrganizationUpsertCacheMut.Lock()
		groupOrganizationUpsertCache[key] = cache
		groupOrganizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
